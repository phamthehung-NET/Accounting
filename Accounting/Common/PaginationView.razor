@inject NavigationManager NavigationManager
@typeparam TData

@if(PaginationData !=null && PaginationData.TotalPages > 0)
{
<nav class="d-flex justify-content-end">
    <ul class="pagination me-2">
            @if (Pagination.PageIndex > 1)
        {
            <li class="page-item" onclick="@(async () => await onPaginationChange("prev", null))">
                <a class="page-link" role="button" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        @if(PaginationData.TotalPages >= 6)
        {
            if(Pagination.PageIndex < 4)
            {
                @for(int i = 1; i <= 4; i++)
                {
                    var num = i;
                    <li class=@(Pagination.PageIndex == i ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("pageIndex", num))">
                        <a class="page-link" role="button">@i</a>
                    </li>
                }
                <li class="page-item disabled">
                    <a class="page-link" role="button">...</a>
                </li>
                <li class=@(Pagination.PageIndex == PaginationData.TotalPages ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("last", null))">
                    <a class="page-link" role="button">@PaginationData.TotalPages</a>
                </li>
            }
            else if (Pagination.PageIndex >= 4 && Pagination.PageIndex < PaginationData.TotalPages - 3)
            {
                <li class=@(Pagination.PageIndex == 1 ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("pageIndex", 1))">
                    <a class="page-link" role="button">1</a>
                </li>
                if(Pagination.PageIndex > 4)
                {
                    <li class="page-item disabled">
                        <a class="page-link" role="button">...</a>
                    </li>
                }
                @for (int i = Pagination.PageIndex - 2; i <= Pagination.PageIndex + 2; i++)
                {
                    var num = i;
                    <li class=@(Pagination.PageIndex == i ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("pageIndex", num))">
                        <a class="page-link" role="button">@i</a>
                    </li>
                }
                <li class="page-item disabled">
                    <a class="page-link" role="button">...</a>
                </li>
                <li class=@(Pagination.PageIndex == PaginationData.TotalPages ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("last", null))">
                    <a class="page-link" role="button">@PaginationData.TotalPages</a>
                </li>
            }
            else
            {
                <li class=@(Pagination.PageIndex == 1 ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("pageIndex", 1))">
                    <a class="page-link" role="button">1</a>
                </li>
                if(Pagination.PageIndex > 4)
                {
                    <li class="page-item disabled">
                        <a class="page-link" role="button">...</a>
                    </li>
                }
                @for (int i = Pagination.PageIndex - 2; i <= PaginationData.TotalPages; i++)
                {
                    var num = i;
                    <li class=@(Pagination.PageIndex == i ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("pageIndex", num))">
                        <a class="page-link" role="button">@i</a>   
                    </li>
                }
            }
        }
        @if(PaginationData.TotalPages < 6)
        {
            @for (int i = 1; i <= PaginationData.TotalPages; i++)
            {
                var num = i;
                <li class=@(Pagination.PageIndex == i ? "page-item active" : "page-item") onclick="@(async () => await onPaginationChange("pageIndex", num))">
                    <a class="page-link" role="button">@i</a>
                </li>
            }
        }
        @if(Pagination.PageIndex < PaginationData.TotalPages)
        {
            <li class="page-item" onclick="@(async () => await onPaginationChange("next", null))">
                <a class="page-link" role="button" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
    </ul>
    <div class="col-1">
        <select class="form-select" onchange="@((ChangeEventArgs e) => onPaginationChange("pageSize", int.Parse(e.Value.ToString())))" >
            <option selected="@(Pagination.PageSize == 5)">5</option>
            <option selected="@(Pagination.PageSize == 10)">10</option>
            <option selected="@(Pagination.PageSize == 25)">25</option>
            <option selected="@(Pagination.PageSize == 50)">50</option>
            <option selected="@(Pagination.PageSize == 100)">100</option>
        </select>
    </div>
</nav>
}

@code {
    [Parameter]
    public Pagination<TData> PaginationData { get; set; }

    [Parameter]
    public PaginationObject Pagination { get; set; }

    [Parameter]
    public EventCallback<PaginationObject> GetData { get; set; }

    Uri Uri;

    protected override void OnInitialized()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    }

    //protected override void OnParametersSet()
    //{
    //    DynamicPagination = (dynamic)PaginationData;
    //}

    async Task onPaginationChange(string type, int? number)
    {
        switch(type)
        {
            case "next":
                Pagination.PageIndex++;
                break;
            case "prev":
                Pagination.PageIndex--;
                break;
            case "pageIndex":
                Pagination.PageIndex = (int)number;
                break;
            case "last":
                Pagination.PageIndex = PaginationData.TotalPages;
                break;
            case "pageSize":
                Pagination.PageIndex = 1;
                Pagination.PageSize = (int)number;
                break;
            default:
                break;
        }
        await GetData.InvokeAsync(Pagination);
    }
}
