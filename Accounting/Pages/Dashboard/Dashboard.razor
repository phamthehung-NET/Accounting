@page "/dashboard"
@using BlazorDateRangePicker
@using ChartJs.Blazor.ChartJS.BarChart;
@using ChartJs.Blazor.ChartJS.Common.Properties;
@using ChartJs.Blazor.Charts
@using Microsoft.AspNetCore.WebUtilities;
@using System.Globalization
@using Microsoft.Extensions.Localization;
@inject IDashboardRepository DasboardRepo
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@attribute [Authorize]

<PageTitle>@LRes["Dashboard"]</PageTitle>

<div class="container-fluid">
    <div class="card col-md-5 col-sm-12 col-lg-5 col-xl-5 mb-4 p-0">
        <div class="card-header d-flex justify-content-between">
            <div class="fw-bold">@LRes["WastedMeatWeight"]</div>
            <div>@($"{WastedDate.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(WastedDate)})")</div>
        </div>
        <div class="card-body overflow-auto" style="height: 15rem">
            <div class="mb-2">
                <DateRangePicker class="form-control" placeholder="@LRes["ChooseDate"]" OnRangeSelect="async (dateRange) => await OnRangeSelect(dateRange) " MinDate="DateTime.Now.AddYears(-10)" MaxDate="DateTime.Now" ApplyLabel="@LRes["Done"]" CancelLabel="@LRes["Close"]" ShowOnlyOneCalendar="true" SingleDatePicker="true"/>
            </div>
            @if (Data != null && Data.Result != null && Data.Result.Any())
            {
                <table class="table table-bordered table-striped text-center table-responsive">
                    <thead>
                        <tr>
                            <th>@LRes["Name"]</th>
                            <th>@LRes["Meat Type"]</th>
                            <th>@LRes["Wasted"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Data.Result)
                        {
                            <tr>
                                <td>@item.MeatName</td>
                                <td>@HelperFunctions.RenderMeatType(LRes, item.MeatType)</td>
                                <td>@(item.Weight + " Kg")</td>
                            </tr>
                        }
                        <tr>
                            <td class="fw-bold" colspan="2">@LRes["Total"]</td>
                            <td>@(Data.WastedWeight + " Kg")</td>
                        </tr>
                    </tbody>
                </table>
            }
            @*<ChartJsBarChart Config="config"/>*@
        </div>
    </div>
</div>

@code {
    DashboardDTO Data;

    DateTime WastedDate = DateTime.Now;

    BarConfig config;

    protected override void OnInitialized()
    {
        config = new()
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = LRes["Lastest 10 days wasted weight"].ToString(),
                },
            },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetWastedData();
        }
    }

    async Task GetWastedData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            Data = DasboardRepo.GetWastedWeight(WastedDate);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception)
        {
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }
    async Task OnRangeSelect(DateRange range)
    {
        WastedDate = range.Start.DateTime;
        await GetWastedData();
    }
}
