@* @page "/dashboard" *@
@using BlazorDateRangePicker
@using ChartJs.Blazor
@using ChartJs.Blazor.BarChart;
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.Util;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Globalization
@using Microsoft.Extensions.Localization;
@using System.Drawing;
@inject IDashboardRepository DasboardRepo
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@inject ILogRepository LogRepo
@inject ISettingRepository SettingRepo
@attribute [Authorize]

<PageTitle>@LRes["Dashboard"]</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="card col-md-6 col-sm-12 col-lg-6 col-xl-6 mb-4 p-0">
            <div class="card-header d-flex justify-content-between">
                <div class="fw-bold">@LRes["WastedMeatWeight"]</div>
                <div>@($"{WastedDate.ToString("dd/MM/yyyy")} ({HelperFunctions.ConvertSolarToLunar(WastedDate)} {LRes["LunarDate"]})")</div>
            </div>
            <div class="card-body">
                <div class="mb-2">
                    <DateRangePicker class="form-control" placeholder="@LRes["ChooseDate"]" OnRangeSelect="async (dateRange) => await OnRangeSelect(dateRange) " MinDate="DateTime.Now.AddYears(-10)" MaxDate="DateTime.Now" ApplyLabel="@LRes["Done"]" CancelLabel="@LRes["Close"]" ShowOnlyOneCalendar="true" SingleDatePicker="true" />
                </div>
                @if (WastedData != null && WastedData.Result != null && WastedData.Result.Any())
                {
                    <table class="table table-bordered table-striped text-center table-responsive">
                        <thead>
                            <tr>
                                <th>@LRes["Name"]</th>
                                <th>@LRes["Meat Type"]</th>
                                <th>@LRes["Wasted"]</th>
                            </tr>
                        </thead>
                        <tbody class="overflow-auto" style="height: 10rem">
                            @foreach (var item in WastedData.Result)
                            {
                                <tr>
                                    <td>@item.MeatName</td>
                                    <td>@HelperFunctions.RenderMeatType(LRes, item.MeatType)</td>
                                    <td>@(item.Weight + " Kg")</td>
                                </tr>
                            }
                            <tr>
                                <td class="fw-bold" colspan="2">@LRes["Total"]</td>
                                <td>@(WastedData.WastedWeight + " Kg")</td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <div class="card col-md-6 col-sm-12 col-lg-6 col-xl-6 mb-4 p-0">
            <div class="card-header d-flex justify-content-between">
                <div class="fw-bold">@LRes["PeopleIndebt"]</div>
                <div class="d-flex">
                    <button class="btn btn-outline-primary me-1" onclick="@(async () => {MostDebtNumberOfItem = 10; await GetMostDebtedData();})">@LRes["Top 10"]</button>
                    <button class="btn btn-outline-primary" onclick="@(async () => {MostDebtNumberOfItem = 0; await GetMostDebtedData();})">@LRes["All"]</button>
                </div>
            </div>
            <div class="card-body">
                @if (MostDebtData.Any())
                {
                    <table class="table table-striped text-center table-responsive">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>@LRes["Name"]</th>
                                <th>@LRes["TotalDebt"]</th>
                            </tr>
                        </thead>
                        <tbody class="overflow-auto" style="height: 10rem">
                            @foreach (var item in MostDebtData)
                            {
                                <tr>
                                    <td>@(MostDebtData.IndexOf(item) + 1)</td>
                                    <td>@item.Name</td>
                                    <td>@(item.Debt.ToString("n0") + ".000 VND")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <div class="card col-md-6 col-sm-12 col-lg-6 col-xl-6 mb-4 p-0">
            <div class="card-header d-flex justify-content-between">
                <div class="fw-bold">@LRes["LongestDebtPeople"]</div>
                <div>
                    <div class="d-flex">
                        <button class="btn btn-outline-primary me-1" onclick="@(async () => {LongestDebtNumberOfItem = 10; await GetLongestDebtedData();})">@LRes["Top 10"]</button>
                        <button class="btn btn-outline-primary" onclick="@(async () => {LongestDebtNumberOfItem = 0; await GetLongestDebtedData();})">@LRes["All"]</button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (LongestDebtData.Any())
                {
                    <table class="table table-striped text-center table-responsive">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>@LRes["Name"]</th>
                                <th>@LRes["Debt date"]</th>
                                <th>@LRes["TotalDebt"]</th>
                            </tr>
                        </thead>
                        <tbody class="overflow-auto" style="height: 10rem">
                            @foreach (var item in LongestDebtData)
                            {
                                <tr>
                                    <td>@(LongestDebtData.IndexOf(item) + 1)</td>
                                    <td>@item.Name</td>
                                    <td>@(item.Date.ToString("dd/MM/yyyy") + $" ({item.LunarDate} {LRes["LunarDate"]})" + " " + HelperFunctions.GetTimeDifference(LRes, item.Date))</td>
                                    <td>@(item.Debt.ToString("n0") + ".000 VND")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
    <div class="card col-12">
        <Chart Config="config"/>
    </div>
</div>

@code {
    DashboardDTO WastedData;

    List<DebtDashboardDTO> MostDebtData = new();

    List<DebtDashboardDTO> LongestDebtData = new();

    int MostDebtNumberOfItem = 10;

    int LongestDebtNumberOfItem = 10;

    DateTime WastedDate = DateTime.Now;

    BarConfig config;

    protected override void OnInitialized()
    {
        config = new()
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = LRes["Lastest 10 days wasted weight"].ToString(),
                },
                Legend = new()
                {
                    Display = false
                },
            },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetWastedData();
            await GetChartData();
            await GetMostDebtedData();
            await GetLongestDebtedData();
        }
    }

    async Task GetWastedData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            WastedData = DasboardRepo.GetWastedWeight(WastedDate);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Dashboard > GetWastedData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    async Task GetMostDebtedData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            MostDebtData = DasboardRepo.GetDebtData(DasboardDebtFilterType.MostDebt, MostDebtNumberOfItem);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Dashboard > GetMostDebtedData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    async Task GetLongestDebtedData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            LongestDebtData = DasboardRepo.GetDebtData(DasboardDebtFilterType.LongestDebt, LongestDebtNumberOfItem);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Dashboard > GetLongestDebtedData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    async Task OnRangeSelect(DateRange range)
    {
        WastedDate = range.Start.DateTime;
        await GetWastedData();
    }

    async Task GetChartData()
    {
        try
        {
            var data = DasboardRepo.GetChartData();

            List<string> colors = new();
            List<decimal> showingData = new();

            data.ForEach(item =>
            {
                if (item.WastedWeight > 0 && item.WastedWeight <= 3)
                {
                    colors.Add(Constants.GoodChartColor);
                    showingData.Add(item.WastedWeight);
                    config.Data.Labels.Add(HelperFunctions.ConvertSolarToLunar(item.ActivateDate));
                }
                else if (item.WastedWeight > 3 && item.WastedWeight <= 5)
                {
                    colors.Add(Constants.WarningChartColor);
                    showingData.Add(item.WastedWeight);
                    config.Data.Labels.Add(HelperFunctions.ConvertSolarToLunar(item.ActivateDate));
                }
                else if (item.WastedWeight > 5)
                {
                    colors.Add(Constants.NotGoodChartColor);
                    showingData.Add(item.WastedWeight);
                    config.Data.Labels.Add(HelperFunctions.ConvertSolarToLunar(item.ActivateDate));
                }
            });

            BarDataset<decimal> dataset = new BarDataset<decimal>(showingData)
                {
                    BackgroundColor = colors.ToArray(),
                };
            config.Data.Datasets.Add(dataset);
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Dashboard > GetChartData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }
}
