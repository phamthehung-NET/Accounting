@* @page "/log" *@
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@inject ILogRepository LogRepo
@attribute [Authorize]

<PageTitle>@LRes["Log"]</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <CommonLabel DisplayText="@LRes["Log list"]" Color="@Constants.PrimaryColor"></CommonLabel>
    </div>
    <div class="d-flex justify-content-end mb-2">
        <div class="col-md-3 col-lg-3 col-sm-12 me-1">
            <DateRangePicker class="form-control" @bind-StartDate="@(DateRange.StartDate)" @bind-EndDate="@(DateRange.EndDate)" placeholder="@LRes["ChooseDate"]" OnRangeSelect="OnRangeSelect" MinDate="DateTime.Now.AddYears(-10)" MaxDate="DateTime.Now" ApplyLabel="@LRes["Done"]" CancelLabel="@LRes["Close"]" ShowOnlyOneCalendar="true"/>
        </div>
        <div class="d-flex col-md-4 justify-content-between">
            <div class="col-md-10 pe-1">
                <input type="text" class="form-control" placeholder="@LRes["Search by name"]" value="@(Keyword)" onchange="@((ChangeEventArgs e) => onParamsChange(e, "Keyword"))"/>
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary w-100" @onclick="async () => await onParamSubmit()"><i class="fa-regular fa-filter"></i> @LRes["Filter"]</button>
            </div>
        </div>
    </div>
    <CommonDataTable Context="Context" 
        Headers="Headers" 
        TData="Log" 
        PaginationData="Logs" 
        Sorting="@Sorting" 
        SortData="async (sortingString) => await SortData(sortingString)"
        GetData="async (pagination) => await GetPaginateData(pagination)"
        PaginationObject="Pagination"
        DisplayPaging="true">
        <TBody>
            <tr>
                <td>@Context.Id</td>
                <td>@Context.Location</td>
                <td>@Context.StackTrace</td>
                <td>@Context.CreatedDate</td>
                <td>@Context.Message</td>
            </tr>
        </TBody>
    </CommonDataTable>
</div>

@code {

    Pagination<Log> Logs;

    string Keyword = "";

    PaginationObject Pagination = new();

    Uri Uri;

    Dictionary<string, string> Query = new()
    {
        {"pageIndex", ""},
        {"pageSize", ""},
        {"keyword", ""},
    };

    List<Header> Headers = new();

    string Sorting = "id_desc";

    DateRangeDTO DateRange = new()
    {
        StartDate = DateTimeOffset.Now,
        EndDate = DateTimeOffset.Now,
    };

    protected override void OnInitialized()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        Headers.Add(new Header() { Name = "Id", DisplayName = LRes["Id"], Ordering = true });
        Headers.Add(new Header() { Name = "Location", DisplayName = LRes["Location"], Ordering = true });
        Headers.Add(new Header() { Name = "StackTrace", DisplayName = LRes["StackTrace"], Ordering = true });
        Headers.Add(new Header() { Name = "CreatedDate", DisplayName = LRes["CreatedDate"], Ordering = true });
        Headers.Add(new Header() { Name = "Message", DisplayName = LRes["Message"], Ordering = true });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
        }
    }

    async Task GetData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (Uri != null)
            {
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("keyword", out var keyword))
                {
                    if (string.IsNullOrEmpty(Query["keyword"]))
                    {
                        Keyword = Query["keyword"];
                    }
                    else
                    {
                        Keyword = keyword;
                    }

                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageSize", out var pageSize))
                {
                    if (string.IsNullOrEmpty(Query["pageSize"]))
                    {
                        Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
                    }
                    else
                    {
                        Pagination.PageSize = int.Parse(Query["pageSize"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageIndex", out var pageIndex))
                {
                    if (string.IsNullOrEmpty(Query["pageIndex"]))
                    {
                        Pagination.PageIndex = !string.IsNullOrEmpty(pageIndex) ? int.Parse(pageIndex) : Pagination.PageIndex;
                    }
                    else
                    {
                        Pagination.PageIndex = int.Parse(Query["pageIndex"]);
                    }
                }
            }

            Logs = LogRepo.GetAll(Keyword, Sorting, DateRange.StartDate != null ? DateRange.StartDate.Value.DateTime : null, DateRange.EndDate != null ? DateRange.EndDate.Value.DateTime : null, Pagination.PageIndex, Pagination.PageSize);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Log list > GetData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    void onParamsChange(ChangeEventArgs e, string paramType)
    {
        Pagination.PageIndex = 1;
        switch (paramType)
        {
            case "Keyword":
                Keyword = e.Value.ToString();
                break;
            default:
                break;
        }
    }

    async Task onParamSubmit()
    {
        Query["keyword"] = Keyword;

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));

        await GetData();
    }

    async Task GetPaginateData(PaginationObject pagination)
    {
        Pagination.PageIndex = pagination.PageIndex;
        Pagination.PageSize = pagination.PageSize;

        Query["pageIndex"] = pagination.PageIndex.ToString();
        Query["pageSize"] = pagination.PageSize.ToString();
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));

        await GetData();
    }

    async Task SortData(string sortingString)
    {
        Sorting = sortingString;
        StateHasChanged();
        await GetData();
    }

    void OnRangeSelect(BlazorDateRangePicker.DateRange range)
    {
        DateRange.StartDate = range.Start;
        DateRange.EndDate = range.End;
    }
}
