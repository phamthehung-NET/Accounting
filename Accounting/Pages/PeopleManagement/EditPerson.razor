@using Microsoft.Extensions.Localization;
@inject IPeopleRepository PeopleRepo
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@inject ILogRepository LogRepo

<EditForm EditContext="editContext" OnValidSubmit="async () => await OnSubmit()">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <CommonLabel DisplayText="@LRes["EditPerson"]" Color="@Constants.WarningColor"></CommonLabel>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <DataAnnotationsValidator/>
                <div class="col-md-9">
                    <div class="mb-2">
                        <label>@LRes["Name"]</label>
                        <InputText @bind-Value="person.Name" class="form-control"/>
                        <ValidationMessage For="() => person.Name"/>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["PhoneNumber"]</label>
                        <InputText @bind-Value="person.PhoneNumber" class="form-control"/>
                        <ValidationMessage For="() => person.PhoneNumber"/>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["Address"]</label>
                        <InputText @bind-Value="person.Address" class="form-control"/>
                        <ValidationMessage For="() => person.Address"/>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["Type"]:</label>
                        <input class="ms-2" type="radio" id="seller" name="type" @onclick="() => OnSelectType(true)" checked="@(person.Source)"/>
                        <label for="seller" class="me-2">@LRes["Seller"]</label>
                        <input type="radio" id="buyer" name="type" @onclick="() => OnSelectType(false)" checked="@(!person.Source)"/>
                        <label for="buyer">@LRes["Buyer"]</label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@LRes["Close"]</button>
                <button type="submit" class="btn btn-primary">@LRes["Done"]</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    EditContext editContext;

    ValidatedPerson person = new() { Source = false };

    [Parameter]
    public EventCallback GetData { get; set; }

    [Parameter]
    public Person Person { get; set; }

    protected override void OnParametersSet()
    {
        if(Person != null)
        {
            person.Id = person.Id;
            person.Address = Person.Address;
            person.Name = Person.Name;
            person.PhoneNumber = Person.PhoneNumber;
            person.Source = Person.Source;
        }
        editContext = new(person);
    }

    async Task OnSubmit()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            Person personEdit = new()
            {
                Id = person.Id,
                Address = person.Address,
                Name = person.Name,
                PhoneNumber = person.PhoneNumber,
                Source = person.Source,
            };
            bool result = PeopleRepo.UpdatePerson(personEdit);
            await HelperFunctions.RemoveIndicator(JsRuntime);

            if (result)
            {
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["EditPersonSuccess"]);
                await HelperFunctions.HideModal(JsRuntime, "editPersonModal");
                await GetData.InvokeAsync();
                return;
            }
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["EditPersonFailed"]);
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Manage People > Edit person Modal > OnSubmit()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    void OnSelectType(bool value)
    {
        person.Source = value;
    }
}
