@page "/people-management"
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<Resource> LRes
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IPeopleRepository PeopleRepo
@inject ILogRepository LogRepo
@inject ISettingRepository SettingRepo
@attribute [Authorize]

<PageTitle>@LRes["Manage person"]</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <CommonLabel DisplayText="@LRes["PeopleList"]" Color="@Constants.PrimaryColor"></CommonLabel>
        <button type="button" class="btn btn-outline-primary mb-2" data-bs-toggle="modal" data-bs-target="#addPersonModal"><i class="fa-duotone fa-plus"></i> @LRes["Add"]</button>
    </div>
    <CommonDataTable Context="Context" 
        Headers="Headers" 
        TData="PersonDTO" 
        PaginationData="People" 
        Sorting="@Sorting" 
        SortData="async (sortingString) => await SortData(sortingString)"
        GetData="async (pagination) => await GetPaginateData(pagination)"
        PaginationObject="Pagination"
        DisplayPaging="true">
        <TBody>
            <tr>
                <td>@Context.Name</td>
                <td>@Context.PhoneNumber</td>
                <td>@Context.Address</td>
                <td>@HelperFunctions.HandleDisplayPersonType(LRes, Context.Source)</td>
                <td>@(Context.NearestTransaction != null ? (Context.NearestTransaction.ActivateDate.Value.ToString("dd/MM/yyyy") + " (" + (string.IsNullOrEmpty(Context.NearestTransaction.LunarActiveDate) ? HelperFunctions.GetLunarDate(SettingRepo.IsLeapYear(Context.NearestTransaction.ActivateDate.Value.Year), Context.NearestTransaction.ActivateDate.Value) : Context.NearestTransaction.LunarActiveDate) + ")") : LRes["No data"])</td>
                <td>
                    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#nearestTransactionModal" disabled="@(Context.NearestTransaction == null)" @onclick="() => {SelectedPersonDTO = Context;}"><i class="fa-regular fa-circle-info"></i> @LRes["ViewNearestTransaction"]</button>
                    <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editPersonModal" @onclick="() => OnSelectPerson(Context)"><i class="fa-duotone fa-pen-to-square"></i> @LRes["Edit"]</button>
                    <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deletePerson" @onclick="() => OnSelectPerson(Context)"><i class="fa-solid fa-recycle"></i> @LRes["Delete"]</button>
                </td>
            </tr>
        </TBody>
    </CommonDataTable>
    <CommonModalWrapper Id="addPersonModal">
        <ModalContent>
            <AddPerson GetData="GetData"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="editPersonModal">
        <ModalContent>
            <EditPerson GetData="GetData" Person="SelectedPerson"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="nearestTransactionModal">
        <ModalContent>
            <NearestTransaction BillId="SelectedPersonDTO != null && SelectedPersonDTO.NearestTransaction != null ? SelectedPersonDTO.NearestTransaction.Id : 0" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonConfirmModal Title="@LRes["DeleteTitle"]" Message="@LRes["DeletePersonConfirmation"]" ModalID="deletePerson" SubmitEvent="async () => await DeletePerson(SelectedPerson.Id)"/>
</div>

@code {
    List<Header> Headers = new();

    string Sorting = "id_desc";

    string Keyword = "";

    bool? IsSource = null;

    Dictionary<string, string> Query = new()
    {
        {"pageIndex", ""},
        {"pageSize", ""},
        {"keyword", ""},
        {"isSource", ""}
    };

    PaginationObject Pagination = new();

    Uri Uri;

    Pagination<PersonDTO> People;

    Person SelectedPerson;

    PersonDTO SelectedPersonDTO;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
        }
    }

    protected override void OnInitialized()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        Headers.Add(new Header() { Name = "Name", DisplayName = LRes["Name"], Ordering = true });
        Headers.Add(new Header() { Name = "PhoneNumber", DisplayName = LRes["PhoneNumber"], Ordering = true });
        Headers.Add(new Header() { Name = "Address", DisplayName = LRes["Address"], Ordering = true });
        Headers.Add(new Header() { Name = "Source", DisplayName = LRes["Type"], Ordering = true });
        Headers.Add(new Header() { Name = "NearestTransaction", DisplayName = LRes["NearestTransaction"]});
        Headers.Add(new Header() { Name = "Actions", DisplayName = LRes["Actions"] });
    }

    async Task GetData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (Uri != null)
            {
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("keyword", out var keyword))
                {
                    Keyword = !string.IsNullOrEmpty(Keyword) ? Keyword : keyword;
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageSize", out var pageSize))
                {
                    Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
                    if (string.IsNullOrEmpty(Query["pageSize"]))
                    {
                        Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
                    }
                    else
                    {
                        Pagination.PageSize = int.Parse(Query["pageSize"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageIndex", out var pageIndex))
                {
                    if (string.IsNullOrEmpty(Query["pageIndex"]))
                    {
                        Pagination.PageIndex = !string.IsNullOrEmpty(pageIndex) ? int.Parse(pageIndex) : Pagination.PageIndex;
                    }
                    else
                    {
                        Pagination.PageIndex = int.Parse(Query["pageIndex"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("isSource", out var isSource))
                {
                    if (string.IsNullOrEmpty(Query["isSource"]))
                    {
                        IsSource = !string.IsNullOrEmpty(isSource) ? bool.Parse(isSource) : null;
                    }
                    else
                    {
                        IsSource = bool.Parse(Query["isSource"]);
                    }
                }
            }

            People = PeopleRepo.GetAllPeople(Keyword, Sorting, IsSource, Pagination.PageIndex, Pagination.PageSize);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "People list > GetData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    async Task GetPaginateData(PaginationObject pagination)
    {
        Pagination.PageIndex = pagination.PageIndex;
        Pagination.PageSize = pagination.PageSize;

        Query["pageIndex"] = pagination.PageIndex.ToString();
        Query["pageSize"] = pagination.PageSize.ToString();
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));

        await GetData();
    }

    async Task SortData(string sortingString)
    {
        Sorting = sortingString;
        StateHasChanged();
        await GetData();
    }

    void OnSelectPerson(PersonDTO person)
    {
        SelectedPerson = PeopleRepo.GetPersonDetail(person.Id);
    }

    async Task DeletePerson(int id)
    {
        try
        {
            if(id > 0)
            {
                await HelperFunctions.AddIndicator(JsRuntime);
                var result = PeopleRepo.DeletePerson(id);
                await HelperFunctions.RemoveIndicator(JsRuntime);
                if (result)
                {
                    await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["Move to recycle bin success"]);
                    await GetData();
                    return;
                }
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["Move to reycle bin failed"]);
            }
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "People list > DetelePerson()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }
}
