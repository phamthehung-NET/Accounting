@page "/manage-entry"
@using BlazorDateRangePicker
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<Resource> LRes
@inject IBillRepository BillRepo
@inject NavigationManager NavigationManager 

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-2">
        <CommonLabel DisplayText="@LRes["EntryList"]" Color="primary"></CommonLabel>
        <div class="fw-bold">@ShowingDate</div>
    </div>
    <div class="d-flex justify-content-end mb-2">
        <div class="col-md-3 col-lg-3 col-sm-12 me-2">
            <DateRangePicker class="form-control" @bind-StartDate="@(DateRange.StartDate)" @bind-EndDate="@(DateRange.EndDate)" placeholder="@LRes["ChooseDate"]" OnRangeSelect="OnRangeSelect" MinDate="DateTime.Now.AddYears(-10)" MaxDate="DateTime.Now"/>
        </div>
        <div class="d-flex col-md-4 col-lg-4 col-sm-12 justify-content-between">
            <div class="col-md-10 pe-1">
                <input type="text" class="form-control" placeholder="@LRes["Search by name"]" value="@Keyword" onchange="@((ChangeEventArgs e) => OnParamChange(e, "keyword"))" />
            </div>
            <div class="col-md-2 col-lg-2 col-sm-12">
                <button class="btn btn-primary w-100" @onclick="() => OnParamSubmit()"><i class="fa-regular fa-filter"></i> @LRes["Filter"]</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="card col-md-3 col-sm-12 col-lg-3 col-xl-3 mb-4 p-0">
            <div class="card-header">
                @LRes["Add"]
            </div>
            <div class="card-body d-flex align-items-center justify-content-center">
                <div class="text-center text-primary" role="button" data-bs-toggle="modal" data-bs-target="#addBillPeopleModal">
                    <i class="fa-regular fa-circle-plus fa-2xl"></i>
                    <div class="mt-2" style="font-size: 1.5rem">@LRes["ClickToAdd"]</div>
                </div>
            </div>
        </div>
        @if(Bills != null && Bills.Items.Any())
        {
            foreach(var bill in Bills.Items)
            {
                <div class="card col-md-3 col-sm-12 col-lg-3 col-xl-3 mb-4 p-0">
                    <div class="card-header d-flex justify-content-between">
                        <div class="fw-bold">@bill.PersonName</div>
                        <div class="d-flex">
                            <div>@(bill.Items.Count() + " " + LRes["item(s)"])</div>
                            @((MarkupString)HandleShowStatus(false))
                        </div>
                    </div>
                    <div class="card-body overflow-auto" style="height: 15rem">
                        <ul class="list-group list-group-flush">
                            @if(bill.ActiveDate.Value.Date == DateTime.Now.Date)
                            {
                                <li class="list-group-item">
                                    <button class="btn border-0 bg-transparent text-primary w-100 py-0" data-bs-toggle="modal" data-bs-target="#addBillMeatModal" @onclick="() => {SelectedBill = bill;}">
                                        <i class="fa-regular fa-circle-plus"></i>
                                        <span>@LRes["Add"]</span>
                                    </button>
                                </li>
                            }
                            @foreach(var item in bill.Items)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <div>@(item.MeatName + " " + HelperFunctions.RenderMeatType(LRes, item.MeatType != null ? item.MeatType.Value : null))</div>
                                    <div>@(item.Weight + " Kg")</div>
                                    <div>@item.Price</div>
                                    <div role="button" @onclick="() => HandleDeleteItemFromBill(item.Id.Value)" class="text-danger"><i class="fa-regular fa-xmark"></i></div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <div>
                            @(bill.TotalPrice == 0 ? string.Empty : bill.TotalPrice.ToString("n0") + ".000 VND")
                        </div>
                        <div>
                            @if (bill.IsPaid == null || !bill.IsPaid.Value)
                            {
                                <button class="btn btn-primary me-1">@LRes["Pay"]</button>
                            }
                            @if(bill.ActiveDate.Value.Date == DateTime.Now.Date)
                            {
                                <button class="btn btn-danger">@LRes["Delete"]</button>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <CommonModalWrapper Id="addBillPeopleModal">
        <ModalContent>
            <AddBillPerson GetData="GetData" PriceType="PriceType.Entry"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="addBillMeatModal">
        <ModalContent>
            <AddBillMeat GetData="GetData" PriceType="PriceType.Entry" BillId="SelectedBill.Id" />
        </ModalContent>
    </CommonModalWrapper>
</div>

@code {
    string Keyword = string.Empty;

    Pagination<BillDTO> Bills;

    PaginationObject Pagination = new();

    Dictionary<string, string> Query = new()
    {
        {"pageSize", ""},
        {"keyword", ""},
        {"startDate", ""},
        {"endDate", ""},
    };

    Uri Uri;

    List<BillDTO> SaveList = new();

    BillDTO SelectedBill = new();

    DateRangeDTO DateRange = new()
    {
        StartDate = DateTimeOffset.Now,
        EndDate = DateTimeOffset.Now,
    };

    string ShowingDate = string.Empty;

    protected override void OnInitialized()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        ShowingDate = HandleShowDate();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            GetData();
        }
    }

    void GetData()
    {
        if (Uri != null)
        {
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("keyword", out var keyword))
            {
                Keyword = !string.IsNullOrEmpty(Keyword) ? Keyword : keyword;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageSize", out var pageSize))
            {
                Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageIndex", out var pageIndex))
            {
                Pagination.PageIndex = !string.IsNullOrEmpty(pageIndex) ? int.Parse(pageIndex) : Pagination.PageIndex;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("startDate", out var startDate))
            {
                DateRange.StartDate = !string.IsNullOrEmpty(startDate) && DateRange.StartDate == null  ? DateTimeOffset.Parse(startDate) : DateRange.StartDate;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("endDate", out var endDate))
            {
                DateRange.EndDate = !string.IsNullOrEmpty(endDate) && DateRange.EndDate == null ? DateTimeOffset.Parse(endDate) : DateRange.EndDate;
            }
        } 

        Bills = BillRepo.GetAll(Keyword, DateRange.StartDate != null ? DateRange.StartDate.Value.DateTime : null, DateRange.EndDate != null ? DateRange.EndDate.Value.DateTime : null, Pagination.PageIndex, Pagination.PageSize, PriceType.Entry);
        StateHasChanged();
    }

    string HandleShowStatus(bool? status)
    {
        if(status != null && (bool)status)
        {
            return $"<div class='ms-2 text-success'>{LRes["Paid"]}</div>";
        }
        return $"<div class='ms-2 text-warning'>{LRes["Unpaid"]}</div>";
    }

    void OnParamChange(ChangeEventArgs e, string paramType)
    {
        switch (paramType)
        {
            case "startDate":
                DateRange.StartDate = !string.IsNullOrEmpty(e.Value.ToString()) ? DateTime.Parse(e.Value.ToString()) : null;
                break;
            case "endDate":
                DateRange.EndDate = !string.IsNullOrEmpty(e.Value.ToString()) ? DateTime.Parse(e.Value.ToString()) : null;
                break;
            case "keyword":
                Keyword = e.Value.ToString();
                break;
            default:
                break;
        }
    }

    void HandleDeleteItemFromBill(int id)
    {

    }

    void OnRangeSelect(BlazorDateRangePicker.DateRange range)
    {
        DateRange.StartDate = range.Start;
        DateRange.EndDate = range.End;
    }

    void OnParamSubmit()
    {
        Query["keyword"] = Keyword;
        Query["startDate"] = DateRange.StartDate != null ? DateRange.StartDate.Value.ToString("dd-MM-yyyy") : "";
        Query["endDate"] = DateRange.EndDate != null ? DateRange.EndDate.Value.ToString("dd-MM-yyyy") : "";

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));

        ShowingDate = HandleShowDate();
        GetData();
    }

    string HandleShowDate()
    {
        if(DateRange.StartDate.Value.Date.CompareTo(DateRange.EndDate.Value.Date) == 0)
        {
            return $"{LRes["Showing"]}: {LRes["date"]} {DateRange.StartDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(DateRange.StartDate.Value.DateTime)} {LRes["LunarDate"]})";
        }
        else
        {
            return $"{LRes["Showing"]}: {LRes["date"]} {LRes["from"]} {DateRange.StartDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(DateRange.StartDate.Value.DateTime)} {LRes["LunarDate"]}) {LRes["to"]} {DateRange.EndDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(DateRange.EndDate.Value.DateTime)} {LRes["LunarDate"]})";
        }
    }
}
