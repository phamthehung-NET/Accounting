@using Microsoft.Extensions.Localization;
@inject IJSRuntime JsRuntime
@inject IHistoryRepository HistoryRepo
@inject IStringLocalizer<Resource> LRes

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <CommonLabel DisplayText="@LRes["ModifiedHistory"]" Color="warning"></CommonLabel>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnDismiss"></button>
        </div>
        <div class="modal-body">
            @if (Histories != null && Histories.Items != null && Histories.Items.Any())
            {
                <CommonDataTable Context="Context"
                        Headers="Headers"
                        TData="History"
                        PaginationData="Histories"
                        DisplayPaging="false">
                    <TableBody>
                        @for(var i = 0;i < Histories.Items.Count;i++)
                        {  
                            <tr>
                                <td>@(i + 1)</td>
                                <td>@Histories.Items[i].CreatedDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                <td>@HandleShowAction(Histories.Items[i].Action)</td>
                                <td>@Histories.Items[i].Content</td>
                            </tr>
                        }
                    </TableBody>
                </CommonDataTable>
            }
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="OnDismiss">@LRes["Done"]</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int BillId { get; set; }

    [Parameter]
    public HistoryType HistoryType { get; set; }

    public List<Header> Headers = new();

    Pagination<History> Histories;

    protected override void OnInitialized()
    {
        Headers.Add(new Header() { Name = "No.", DisplayName = LRes["No."] });
        Headers.Add(new Header() { Name = "Date", DisplayName = LRes["ActionDate"] });
        Headers.Add(new Header() { Name = "Action", DisplayName = LRes["Action"] });
        Headers.Add(new Header() { Name = "Content", DisplayName = LRes["Content"] });
    }

    protected override void OnParametersSet()
    {
        if(BillId > 0)
        {
            GetData();
        }
    }

    void GetData()
    {
        Histories = HistoryRepo.GetAllHistoryByObject(BillId, HistoryType);
        StateHasChanged();
    }

    void OnDismiss()
    {
        BillId = 0;
        Histories = new();
    }

    string HandleShowAction(int action)
    {
        return (HistoryAction)action switch
        {
            HistoryAction.Create => LRes["Create"],
            HistoryAction.AddItem => LRes["AddItem"],
            HistoryAction.RemoveItem => LRes["RemoveItem"],
            HistoryAction.Remove => LRes["Remove"],
            HistoryAction.EditItemPrice => LRes["EditItemPrice"],
            HistoryAction.Pay => LRes["Pay"],
            HistoryAction.Restore => LRes["Restore"],
            _ => string.Empty,
        };
    }
}
