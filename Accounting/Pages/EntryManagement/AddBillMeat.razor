@using Microsoft.Extensions.Localization;
@inject IMeatRepository MeatRepo
@inject IBillRepository BillRepo
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@inject ILogRepository LogRepo

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <CommonLabel DisplayText="@LRes["ChooseMeat"]" Color="@Constants.PrimaryColor"></CommonLabel>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnDismiss"></button>
        </div>
        <div class="modal-body overflow-auto" style="height: 73vh">
            <div class="mb-2">
                <label>@LRes["Weight"]</label>
                <input class="form-control @(!string.IsNullOrEmpty(ErrorMsg) ? "is-invalid" : "")" type="number" value="@(Weight == 0 ? null : Weight)" placeholder="@LRes["EnterWeight"]" min="0" @onchange="OnWeightChange"/>
                <div class="text-danger">@ErrorMsg</div>
            </div>
            <div class="mb-2">
                <input type="text" class="form-control" placeholder="@LRes["Search by name"]" value="@(Keyword)" onchange="@(async (ChangeEventArgs e) => {Keyword = e.Value.ToString(); await GetMeatData();})"/>
            </div>
                @if (Meats != null && Meats.Items.Any())
                {
                    <CommonDataTable Context="Context"
                        Headers="Headers"
                        TData="MeatDTO"
                        PaginationData="Meats"
                        DisplayPaging="false">
                        <TBody>
                            <tr role="button" @onclick="() => OnSelectMeat(Context.Id)">
                                <td>@Context.Name</td>
                                <td>@HelperFunctions.RenderMeatType(LRes, Context.Type.Value)</td>
                                <td>@(Context.Frozen.Value ? LRes["Frozen Meat"] : LRes["Normal Meat"])</td>
                            </tr>
                        </TBody>
                    </CommonDataTable>
                }
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="OnDismiss">@LRes["Done"]</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Action GetData { get; set; }

    [Parameter]
    public int BillId { get; set; }

    [Parameter]
    public PriceType PriceType { get; set; }

    public List<Header> Headers = new();

    Pagination<MeatDTO> Meats;

    decimal Weight = 0;

    string Keyword = string.Empty;

    string ErrorMsg = string.Empty;

    protected override void OnInitialized()
    {
        Headers.Add(new Header() { Name = "Name", DisplayName = LRes["Name"] });
        Headers.Add(new Header() { Name = "Type", DisplayName = LRes["Meat Type"] });
        Headers.Add(new Header() { Name = "Frozen", DisplayName = LRes["Product Type"]});
    }

    protected override async Task OnParametersSetAsync()
    {
        if(BillId > 0)
        {
            await GetMeatData();
        }
    }

    async Task GetMeatData()
    {
        try
        {
            Meats = MeatRepo.GetAllMeats(Keyword, null, null, 1, 10000, "");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Entry/SaleList > Add bill meat modal > GetMeatData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    string HandleDisplayType(bool? type)
    {
        if (type != null && (bool)type)
        {
            return LRes["Seller"];
        }
        return LRes["Buyer"];
    }

    async Task OnSelectMeat(int id)
    {
        ErrorMsg = string.Empty;
        if(Weight > 0)
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (await BillRepo.AddMeatToBill(id, Weight, BillId, PriceType))
            {
                await HelperFunctions.RemoveIndicator(JsRuntime);
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["SuccessfullyAddBillMeat"]);
                await HelperFunctions.HideModal(JsRuntime, "addBillMeatModal");
                GetData.Invoke();
                Weight = 0;
                BillId = 0;
                Keyword = string.Empty;
            }
            else
            {
                await HelperFunctions.RemoveIndicator(JsRuntime);
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["AddBillMeatFailed"]);
                Weight = 0;
                Keyword = string.Empty;
            }
        }
        else
        {
            ErrorMsg = LRes["PleseEnterWeight"];
        }
    }

    void OnWeightChange(ChangeEventArgs e)
    {
        Weight = decimal.Parse(!string.IsNullOrEmpty(e.Value.ToString()) ? e.Value.ToString().Replace('.', ',') : "0");
    }

    void OnDismiss()
    {
        Weight = 0;
        ErrorMsg = string.Empty;
        Keyword = string.Empty;
    }
}
