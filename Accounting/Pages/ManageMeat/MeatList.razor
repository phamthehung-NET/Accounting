@page "/manage-meat"
@using Microsoft.AspNetCore.WebUtilities;
@using System.Globalization
@using Microsoft.Extensions.Localization;
@inject IMeatRepository MeatRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@attribute [Authorize]

<PageTitle>@LRes["Product Management"]</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <CommonLabel DisplayText="@LRes["Product List"]" Color="primary"></CommonLabel>
        <div class="d-flex mb-2">
            <button type="button" class="btn btn-outline-primary me-2" data-bs-toggle="modal" data-bs-target="#priceModal"><i class="fa-duotone fa-circle-dollar"></i> @LRes["Manage Price"]</button>
            <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addModal"><i class="fa-duotone fa-plus"></i> @LRes["Add"]</button>
        </div>
    </div>
    <div class="d-flex justify-content-end mb-2">
        <div class="col-md-1 me-2">
            <select class="form-select" onchange="@((ChangeEventArgs e) => onParamsChange(e, "Prozen"))">
                <option value="">@LRes["Product Type"]</option>
                <option value="true" selected="@(Prozen)">@LRes["Prozen Meat"]</option>
                <option value="false" selected="@(!Prozen)">@LRes["Normal Meat"]</option>
            </select>
        </div>
        <div class="col-md-1 me-2">
            <select class="form-select" onchange="@((ChangeEventArgs e) => onParamsChange(e, "Type"))">
                <option value="">@LRes["Meat Type"]</option>
                <option value="@Constants.BEEF_TYPE" selected="@(Type == Constants.BEEF_TYPE)">@LRes["Beef"]</option>
                <option value="@Constants.BUFFALO_TYPE" selected="@(Type == Constants.BUFFALO_TYPE)">@LRes["Buffalo"]</option>
            </select>
        </div>
        <div class="d-flex col-md-4 justify-content-between">
            <div class="col-md-10 pe-1">
                <input type="text" class="form-control" placeholder="@LRes["Search by name"]" value="@(Keyword)" onchange="@((ChangeEventArgs e) => onParamsChange(e, "Keyword"))"/>
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary w-100" @onclick="() => onParamSubmit()"><i class="fa-regular fa-filter"></i> @LRes["Filter"]</button>
            </div>
        </div>
    </div>
    @*<table class="table table-bordered table-striped text-center">
        <thead>
            <tr>
                <th class="align-middle">@LRes["Name"]</th>
                <th class="align-middle">@LRes["Meat Type"]</th>
                <th class="align-middle">@LRes["Prozen Meat"]?</th>
                <th>
                    @LRes["Yesterday Entry Price"]/Kg
                    <div>@HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))</div>
                </th>
                <th>
                    @LRes["Today Entry Price"]/Kg
                    <div>@HelperFunctions.GetLunarDate(DateTime.Now)</div>
                </th>
                <th>
                    @LRes["Yesterday Sale Price"]/Kg
                    <div>@HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))</div>
                </th>
                <th>
                    @LRes["Today Sale Price"]/Kg
                    <div>@HelperFunctions.GetLunarDate(DateTime.Now)</div>
                </th>
                <th class="align-middle">@LRes["Actions"]</th>
            </tr>
        </thead>
        <tbody>
            @if (Meats != null && Meats.Items.Any())
            {
                foreach (var meat in Meats.Items)
                {
                    <tr>
                        <td>@meat.Name</td>
                        <td>@HelperFunctions.RenderMeatType(meat.Type.Value)</td>
                        <td>@(meat.Prozen.Value ? "✔️" : "❌")</td>
                        <td>@(meat.YesterdayEntryPrice == null ? LRes["No data"] : meat.YesterdayEntryPrice + " " + LRes["Thousand Dong"])</td>
                        <td>@(meat.TodayEntryPrice == null ? LRes["No data"] : meat.TodayEntryPrice + " " + LRes["Thousand Dong"])</td>
                        <td>@(meat.YesterdaySalePrice == null ? LRes["No data"] : meat.YesterdaySalePrice + " " + LRes["Thousand Dong"])</td>
                        <td>@(meat.TodaySalePrice == null ? LRes["No data"] : meat.TodaySalePrice + " " + LRes["Thousand Dong"])</td>
                        <td>
                            <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editModal" @onclick="() => EditMeat(meat.Id) "><i class="fa-duotone fa-pen-to-square"></i> @LRes["Edit"]</button>
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@("#deleteMeat" + meat.Id)"><i class="fa-solid fa-recycle"></i> @LRes["Delete"]</button>
                            <CommonConfirmModal Title="@LRes["DeleteTitle"]" Message="@LRes["DeleteProductConfirmation"]" ModalID="@("deleteMeat" + meat.Id)" SubmitEvent="() => DeleteMeat(meat.Id)"/>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>*@

    <CommonDataTable Context="Context" 
        Headers="Headers" 
        TData="MeatDTO" 
        PaginationData="Meats" 
        Sorting="@Sorting" 
        SortData="(sortingString) => SortData(sortingString)"
        GetData="GetPaginateData"
        PaginationObject="Pagination">
        <TBody>
            <td>@Context.Name</td>
            <td>@HelperFunctions.RenderMeatType(Context.Type.Value)</td>
            <td>@(Context.Prozen.Value ? "✔️" : "❌")</td>
            <td>@(Context.YesterdayEntryPrice == null ? LRes["No data"] : Context.YesterdayEntryPrice + " " + LRes["Thousand Dong"])</td>
            <td>@(Context.TodayEntryPrice == null ? LRes["No data"] : Context.TodayEntryPrice + " " + LRes["Thousand Dong"])</td>
            <td>@(Context.YesterdaySalePrice == null ? LRes["No data"] : Context.YesterdaySalePrice + " " + LRes["Thousand Dong"])</td>
            <td>@(Context.TodaySalePrice == null ? LRes["No data"] : Context.TodaySalePrice + " " + LRes["Thousand Dong"])</td>
            <td>
                <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editModal" @onclick="() => EditMeat(Context.Id) "><i class="fa-duotone fa-pen-to-square"></i> @LRes["Edit"]</button>
                @*<button class="btn btn-info"><i class="fa-solid fa-circle-info"></i> Chi tiết</button>*@
                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@("#deleteMeat" + Context.Id)"><i class="fa-solid fa-recycle"></i> @LRes["Delete"]</button>
                <CommonConfirmModal Title="@LRes["DeleteTitle"]" Message="@LRes["DeleteProductConfirmation"]" ModalID="@("deleteMeat" + Context.Id)" SubmitEvent="() => DeleteMeat(Context.Id)"/>
            </td>
        </TBody>
    </CommonDataTable>
    <CommonModalWrapper Id="addModal">
        <ModalContent>
            <AddMeat GetData="GetData"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="editModal">
        <ModalContent>
            <EditMeat GetData="GetData" Meat="SelectedMeat"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="priceModal">
        <ModalContent>
            <PriceList Meats="Meats" GetData="GetData"/>
        </ModalContent>
    </CommonModalWrapper>
</div>

@code {

    Pagination<MeatDTO> Meats;

    string Keyword = "";

    PaginationObject Pagination = new();

    int? Type = null;

    bool? Prozen = null;

    MeatDTO SelectedMeat;

    Uri Uri;

    Dictionary<string, string> Query = new()
    {
        {"pageIndex", ""},
        {"pageSize", ""},
        {"keyword", ""},
        {"type", ""},
        {"prozen", ""},
    };

    List<Header> Headers = new();

    string Sorting = "name_asc";

    protected override void OnInitialized()
    {
        Headers.Add(new Header() { Name = "Name", DisplayName = LRes["Name"], Ordering = true });
        Headers.Add(new Header() { Name = "Type", DisplayName = LRes["Meat Type"], Ordering = true });
        Headers.Add(new Header() { Name = "Prozen", DisplayName = LRes["Prozen Meat"] + "?", Ordering = true });
        Headers.Add(new Header() { Name = "YesterdayEntryPrice", DisplayName = $"{LRes["Yesterday Entry Price"]}/Kg {HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))}", Ordering = true, IsHtml = true });
        Headers.Add(new Header() { Name = "Today Entry Price", DisplayName = $"{LRes["Today Entry Price"]}/Kg {HelperFunctions.GetLunarDate(DateTime.Now)}", Ordering = true, IsHtml = true });
        Headers.Add(new Header() { Name = "Yesterday Sale Price", DisplayName = $"{LRes["Yesterday Sale Price"]}/Kg {HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))}", Ordering = true, IsHtml = true });
        Headers.Add(new Header() { Name = "Today Sale Price", DisplayName = $"{LRes["Today Sale Price"]}/Kg {HelperFunctions.GetLunarDate(DateTime.Now)}", Ordering = true, IsHtml = true });
        Headers.Add(new Header() { Name = "Actions", DisplayName = LRes["Actions"] });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            GetData();
        }
    }

    void GetData()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (Uri != null)
        {
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("keyword", out var keyword))
            {
                Keyword = keyword;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageSize", out var pageSize))
            {
                Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageIndex", out var pageIndex))
            {
                Pagination.PageIndex = !string.IsNullOrEmpty(pageIndex) ? int.Parse(pageIndex) : Pagination.PageIndex;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("type", out var type))
            {
                Type = !string.IsNullOrEmpty(type) ? int.Parse(type) : null;
            }
            if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("prozen", out var prozen))
            {
                Prozen = !string.IsNullOrEmpty(prozen) ? bool.Parse(prozen) : null;
            }
        }

        Meats = MeatRepository.GetAllMeats(Keyword, Type, Prozen, Pagination.PageIndex, Pagination.PageSize);
        StateHasChanged();
    }

    void EditMeat(int id)
    {
        SelectedMeat = MeatRepository.GetMeatDetail(id);
    }

    async Task DeleteMeat(int id)
    {
        var result = MeatRepository.DeleteMeat(id);
        if (result)
        {
            await HelperFunctions.ShowNotification(JsRuntime, "success", LRes["Move to recycle bin success"]);
            GetData();
            return;
        }
        await HelperFunctions.ShowNotification(JsRuntime, "danger", LRes["Move to reycle bin failed"]);
    }

    void onParamsChange(ChangeEventArgs e, string paramType)
    {
        Pagination.PageIndex = 1;
        switch (paramType)
        {
            case "Prozen":
                Prozen = !string.IsNullOrEmpty(e.Value.ToString()) ? bool.Parse(e.Value.ToString()) : null;
                break;
            case "Type":
                Type = !string.IsNullOrEmpty(e.Value.ToString()) ? int.Parse(e.Value.ToString()) : null;
                break;
            case "Keyword":
                Keyword = e.Value.ToString();
                break;
            default:
                break;
        }
    }

    void onParamSubmit()
    {
        Query["keyword"] = Keyword;
        Query["prozen"] = Prozen.ToString();
        Query["type"] = Type.ToString();

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query));

        Meats = MeatRepository.GetAllMeats(Keyword, Type, Prozen, Pagination.PageIndex, Pagination.PageSize);
    }

    void GetPaginateData(PaginationObject pagination)
    {
        Pagination.PageIndex = pagination.PageIndex;
        Pagination.PageSize = pagination.PageSize;

        Query["pageIndex"] = pagination.PageIndex.ToString();
        Query["pageSize"] = pagination.PageSize.ToString();
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query));

        Meats = MeatRepository.GetAllMeats(Keyword, Type, Prozen, pagination.PageIndex, pagination.PageSize);
    }

    void SortData(string sortingString)
    {
        Sorting = sortingString;
        StateHasChanged();
    }
}
