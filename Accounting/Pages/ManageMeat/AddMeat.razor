@using Microsoft.Extensions.Localization;
@inject IMeatRepository MeatRepository
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@inject ILogRepository LogRepo

<EditForm EditContext="editContext" OnSubmit="async () => await OnSubmit()">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <CommonLabel DisplayText="@LRes["AddNewProduct"]" Color="@Constants.PrimaryColor"></CommonLabel>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnCloseModal"></button>
            </div>
            <div class="modal-body">
                <DataAnnotationsValidator/>
                <div class="col-md-9">
                    <div class="mb-2">
                        <label>@LRes["ProductName"]</label>
                        <InputText @bind-Value="meat.Name" class="form-control"/>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["Meat Type"]</label>
                        <InputSelect @bind-Value="meat.Type" class="form-control">
                            <option value="@((int)MeatType.Beef)">@LRes["Beef"]</option>
                            <option value="@((int)MeatType.Buffalo)">@LRes["Buffalo"]</option>
                            <option value="@((int)MeatType.Calves)">@LRes["Calves"]</option>
                        </InputSelect>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["Frozen Meat"]?</label>
                        <input type="checkbox" value="@meat.Frozen" @onchange="(ChangeEventArgs e) => onChange(e.Value.ToString())"/>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="OnCloseModal">@LRes["Close"]</button>
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">@LRes["Done"]</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    EditContext editContext;

    MeatDTO meat = new() { Frozen = false, Type = (int)MeatType.Beef };

    [Parameter]
    public EventCallback GetData { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(meat);
    }

    void onChange(string value)
    {
        meat.Frozen = Convert.ToBoolean(value);
    }

    async Task OnSubmit()
    {
        try
        {
            if (editContext.Validate())
            {
                await HelperFunctions.AddIndicator(JsRuntime);
                bool result = MeatRepository.AddMeat(meat);

                await HelperFunctions.RemoveIndicator(JsRuntime);
                if (result)
                {
                    meat = new() { Frozen = false, Type = (int)MeatType.Beef };
                    editContext = new(meat);
                    await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["AddProductSuccess"]);
                    await GetData.InvokeAsync();
                    return;
                }
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["AddProductFailed"]);
            }
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Manage Meat > Add Meat Modal > OnSubmit()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    void OnCloseModal()
    {
        meat = new() { Frozen = false, Type = (int)MeatType.Beef };
        editContext = new(meat);
    }
}
