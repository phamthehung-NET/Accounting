@using Accounting.Common
@using Accounting.Model;
@using Accounting.Model.DTO;
@using Accounting.Repositories;
@inject IMeatRepository MeatRepository
@inject IJSRuntime JsRuntime

<EditForm EditContext="editContext" OnSubmit="async () => await OnSubmit()">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <CommonLabel DisplayText="Sửa thông tin mặt hàng" Color="warning"></CommonLabel>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <DataAnnotationsValidator/>
                <div class="col-md-9">
                    <div class="mb-2">
                        <label>Tên mặt hàng</label>
                        <InputText @bind-Value="meat.Name" class="form-control"/>
                    </div>
                    <div class="mb-2">
                        <label>Loại thịt</label>
                        <InputSelect @bind-Value="meat.Type" class="form-control">
                            <option value=""></option>
                            <option value="@Constants.BEEF_TYPE">Bò</option>
                            <option value="@Constants.BUFFALO_TYPE">Trâu</option>
                        </InputSelect>
                    </div>
                    <div class="mb-2">
                        <label>Đông lạnh?</label>
                        <input type="checkbox" @onchange="(ChangeEventArgs e) => onChange(e.Value.ToString())" checked="@meat.Prozen"/>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Xong</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    EditContext editContext;

    MeatDTO meat = new() { Prozen = false };

    [Parameter]
    public EventCallback GetData { get; set; }

    [Parameter]
    public MeatDTO Meat { get; set; }

    //protected override void OnInitialized()
    //{
    //    editContext = new(meat);
    //}

    protected override void OnParametersSet()
    {
        if(Meat != null)
        {
            meat = Meat;
        }
        editContext = new(meat);
    }

    void onChange(string value)
    {
        meat.Prozen = Convert.ToBoolean(value);
    }

    async Task OnSubmit()
    {
        if (editContext.Validate())
        {
            bool result = MeatRepository.EditMeat(meat);

            if (result)
            {
                await HelperFunctions.ShowNotification(JsRuntime, "success", "Sửa thông tin mặt hàng thành công");
                await GetData.InvokeAsync();
                return;
            }
            await HelperFunctions.ShowNotification(JsRuntime, "danger", "Sửa thông tin mặt hàng thất bại");
        }
    }

    //async Task OnCloseModal()
    //{
    //    await GetData.InvokeAsync();
    //}
}
