@inject IMeatRepository MeatRepository
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes
@inject ILogRepository LogRepo

<EditForm EditContext="editContext" OnValidSubmit="async () => await OnSubmit()">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <CommonLabel DisplayText="@LRes["EditProductInfo"]" Color="@Constants.WarningColor"></CommonLabel>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <DataAnnotationsValidator/>
                <div class="col-md-9">
                    <div class="mb-2">
                        <label>@LRes["ProductName"]</label>
                        <InputText @bind-Value="meat.Name" class="form-control"/>
                        <ValidationMessage For="() => meat.Name"/>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["Meat Type"]</label>
                        <InputSelect @bind-Value="meat.Type" class="form-control">
                            <option value="@((int)MeatType.Beef)">@LRes["Beef"]</option>
                            <option value="@((int)MeatType.Buffalo)">@LRes["Buffalo"]</option>
                            <option value="@((int)MeatType.Calves)">@LRes["Calves"]</option>
                        </InputSelect>
                        <ValidationMessage For="() => meat.Type"/>
                    </div>
                    <div class="mb-2">
                        <label>@LRes["Frozen Meat"]?</label>
                        <input type="checkbox" @onchange="(ChangeEventArgs e) => onChange(e.Value.ToString())" checked="@meat.Frozen"/>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@LRes["Close"]</button>
                <button type="submit" class="btn btn-primary">@LRes["Done"]</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    EditContext editContext;

    MeatValidated meat = new() { Frozen = false, Type = (int)MeatType.Beef };

    [Parameter]
    public EventCallback GetData { get; set; }

    [Parameter]
    public MeatDTO Meat { get; set; }

    protected override void OnParametersSet()
    {
        if(Meat != null)
        {
            meat.Frozen = Meat.Frozen;
            meat.Id = Meat.Id;
            meat.Name = Meat.Name;
            meat.Type = Meat.Type;
            meat.Weight = Meat.Weight;
        }
        editContext = new(meat);
    }

    void onChange(string value)
    {
        meat.Frozen = Convert.ToBoolean(value);
    }

    async Task OnSubmit()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            MeatDTO meatEdit = new()
            {
                Id = meat.Id,
                Frozen = meat.Frozen,
                IsDeleted = meat.IsDeleted,
                Name = meat.Name,
                Type = meat.Type,
                Weight = meat.Weight,
            };

            bool result = MeatRepository.EditMeat(meatEdit);

            await HelperFunctions.RemoveIndicator(JsRuntime);
            if (result)
            {
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["EditProductSuccess"]);
                await HelperFunctions.HideModal(JsRuntime, "editMeatModal");
                await GetData.InvokeAsync();
                return;
            }
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["EditProductFailed"]);
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Manage Meat > Edit Meat Modal > OnSubmit()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }
}
