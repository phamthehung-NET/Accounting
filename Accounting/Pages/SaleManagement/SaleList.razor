@page "/manage-sale"
@using BlazorDateRangePicker
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<Resource> LRes
@inject IBillRepository BillRepo
@inject NavigationManager NavigationManager 
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-2">
        <CommonLabel DisplayText="@LRes["SaleList"]" Color="primary"></CommonLabel>
        <div class="fw-bold">@ShowingDate</div>
    </div>
    <div class="d-flex justify-content-end mb-2">
        <div class="col-md-2 col-lg-2 col-sm-12 me-1">
            <select class="form-control" @onchange="HandleSelectPaid">
                <option value="">@LRes["ChooseBillType"]</option>
                <option value="true" selected="@IsPaid">@LRes["Paid"]</option>
                <option value="false" selected="@(!IsPaid)">@LRes["Unpaid"]</option>
            </select>
        </div>
        <div class="col-md-3 col-lg-3 col-sm-12 me-1">
            <DateRangePicker class="form-control" @bind-StartDate="@(DateRange.StartDate)" @bind-EndDate="@(DateRange.EndDate)" placeholder="@LRes["ChooseDate"]" OnRangeSelect="OnRangeSelect" MinDate="DateTime.Now.AddYears(-10)" MaxDate="DateTime.Now" ApplyLabel="@LRes["Done"]" CancelLabel="@LRes["Close"]" ShowOnlyOneCalendar="true"/>
        </div>
        <div class="d-flex col-md-4 col-lg-4 col-sm-12 justify-content-between">
            <div class="col-md-10 col-lg-10 col-sm-12 pe-1">
                <input type="text" class="form-control" placeholder="@LRes["Search by name"]" value="@Keyword" @onchange="(ChangeEventArgs e) => {Keyword = e.Value.ToString();}" />
            </div>
            <div class="col-md-2 col-lg-2 col-sm-12">
                <button class="btn btn-primary w-100" @onclick="() => OnParamSubmit()"><i class="fa-regular fa-filter"></i> @LRes["Filter"]</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="card col-md-3 col-sm-12 col-lg-3 col-xl-3 mb-4 p-0">
            <div class="card-header">
                @LRes["Add"]
            </div>
            <div class="card-body d-flex align-items-center justify-content-center">
                <div class="text-center text-primary" role="button" data-bs-toggle="modal" data-bs-target="#addBillPeopleModal">
                    <i class="fa-regular fa-circle-plus fa-2xl"></i>
                    <div class="mt-2" style="font-size: 1.5rem">@LRes["ClickToAdd"]</div>
                </div>
            </div>
        </div>
        @if (Bills != null && Bills.Items.Any())
        {
            foreach (var bill in Bills.Items)
            {
                <div class="card col-md-3 col-sm-12 col-lg-3 col-xl-3 mb-4 p-0">
                    <div class="card-header d-flex justify-content-between">
                        <div class="fw-bold">@bill.PersonName</div>
                        <div class="d-flex">
                            <div>@(bill.Items.Count() + " " + LRes["item(s)"])</div>
                            @if (bill.Items.Any())
                            {
                                @((MarkupString)HandleShowStatus(bill.IsPaid))
                            }
                        </div>
                    </div>
                    <div class="card-body overflow-auto" style="height: 15rem">
                        <ul class="list-group list-group-flush">
                            @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                            {
                                <li class="list-group-item">
                                    <button class="btn border-0 bg-transparent text-primary w-100 py-0" data-bs-toggle="modal" data-bs-target="#addBillMeatModal" @onclick="() => HandleSelecteBill(bill)">
                                        <i class="fa-regular fa-circle-plus"></i>
                                        <span>@LRes["Add"]</span>
                                    </button>
                                </li>
                            }
                            @foreach (var item in bill.Items)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <div>@(item.MeatName + " " + HelperFunctions.RenderMeatType(LRes, item.MeatType != null ? item.MeatType.Value : null))</div>
                                    <div>@(item.Weight + " Kg")</div>
                                    <div>@item.Price</div>
                                    @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                                    {
                                        <div role="button" @onclick="() => HandleDeleteItemFromBill(item.Id.Value, bill.Id)" class="text-danger"><i class="fa-regular fa-xmark"></i></div>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <div>
                            @(bill.TotalPrice == 0 ? string.Empty : bill.TotalPrice.ToString("n0") + ".000 VND")
                        </div>
                        <div class="text-end">
                            @if ((bill.IsPaid == null || !bill.IsPaid.Value) && bill.Items.Any())
                            {
                                <button class="btn btn-primary me-1" data-bs-toggle="modal" data-bs-target="#payingBill" @onclick="() => HandleSelecteBill(bill)"><i class="fa-brands fa-amazon-pay"></i> @LRes["Pay"]</button>
                            }
                            @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                            {
                                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteBill" @onclick="() => HandleSelecteBill(bill)"><i class="fa-solid fa-recycle"></i> @LRes["Delete"]</button>
                            }
                            <div class="btn-group dropup">
                                <button type="button" class="btn border-0 bg-transparent p-1 ms-2" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa-regular fa-ellipsis-vertical"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                                    {
                                        <li class="dropdown-item">@LRes["EditItemsPrice"]</li>
                                    }
                                    <li class="dropdown-item" data-bs-toggle="modal" data-bs-target="#historyModal" @onclick="() => HandleSelecteBill(bill)">@LRes["ViewHistory"]</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    @if (Bills != null && Pagination.PageSize < Bills.TotalItems)
    {
        <div class="text-center mb-5">
            <div>
                <button class="btn btn-primary" @onclick="HandleShowMore">@LRes["ShowMore"]</button>
            </div>
        </div>
    }
    <CommonModalWrapper Id="addBillPeopleModal">
        <ModalContent>
            <AddBillPerson GetData="async () => await GetData()" PriceType="PriceType.Sale"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="addBillMeatModal">
        <ModalContent>
            <AddBillMeat GetData="async () => await GetData()" PriceType="PriceType.Sale" BillId="SelectedBill.Id" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="historyModal">
        <ModalContent>
            <HistoryModal BillId="SelectedBill.Id" HistoryType="HistoryType.Bill" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonConfirmModal Title="@LRes["DeleteTitle"]" Message="@LRes["DeleteBillConfimation"]" ModalID="deleteBill" SubmitEvent="async () => await HandleDeleteBill()"/>
    <CommonConfirmModal Title="@LRes["PayingTitle"]" Message="@LRes["PayingBillConfimation"]" ModalID="payingBill" SubmitEvent="async () => await HandlePayingBill()"/>
</div>

@code {
    string Keyword = string.Empty;

    Pagination<BillDTO> Bills;

    PaginationObject Pagination = new();

    Dictionary<string, string> Query = new()
    {
        {"pageSize", ""},
        {"keyword", ""},
        {"startDate", ""},
        {"endDate", ""},
        {"isPaid", ""},
    };

    Uri Uri;

    List<BillDTO> SaveList = new();

    BillDTO SelectedBill = new();

    DateRangeDTO DateRange = new()
        {
            StartDate = DateTimeOffset.Now,
            EndDate = DateTimeOffset.Now,
        };

    string ShowingDate = string.Empty;

    bool? IsPaid;

    protected override void OnInitialized()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        ShowingDate = HandleShowDate();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
        }
    }

    async Task GetData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (Uri != null)
            {
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("keyword", out var keyword))
                {
                    if (string.IsNullOrEmpty(Query["keyword"]))
                    {
                        Keyword = Query["keyword"];
                    }
                    else
                    {
                        Keyword = keyword;
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageSize", out var pageSize))
                {
                    if (string.IsNullOrEmpty(Query["pageSize"]))
                    {
                        Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
                    }
                    else
                    {
                        Pagination.PageSize = int.Parse(Query["pageSize"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("startDate", out var startDate))
                {
                    if (string.IsNullOrEmpty(Query["startDate"]))
                    {
                        DateRange.StartDate = !string.IsNullOrEmpty(startDate) ? DateTimeOffset.Parse(startDate) : DateRange.StartDate;
                    }
                    else
                    {
                        DateRange.StartDate = DateTimeOffset.Parse(Query["startDate"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("endDate", out var endDate))
                {
                    if (string.IsNullOrEmpty(Query["endDate"]))
                    {
                        DateRange.EndDate = !string.IsNullOrEmpty(endDate) ? DateTimeOffset.Parse(endDate) : DateRange.EndDate;
                    }
                    else
                    {
                        DateRange.EndDate = DateTimeOffset.Parse(Query["endDate"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("isPaid", out var isPaid))
                {
                    IsPaid = !string.IsNullOrEmpty(isPaid) ? bool.Parse(isPaid) : IsPaid;
                }
            }

            Bills = BillRepo.GetAll(Keyword, DateRange.StartDate != null ? DateRange.StartDate.Value.DateTime : null, DateRange.EndDate != null ? DateRange.EndDate.Value.DateTime : null, Pagination.PageIndex, Pagination.PageSize, PriceType.Sale, IsPaid);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception e)
        {
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    string HandleShowStatus(bool? status)
    {
        if (status != null && (bool)status)
        {
            return $"<div class='ms-2 text-success'>{LRes["Paid"]}</div>";
        }
        return $"<div class='ms-2 text-warning'>{LRes["Unpaid"]}</div>";
    }

    async Task HandleDeleteItemFromBill(int id, int billId)
    {
        await HelperFunctions.AddIndicator(JsRuntime);
        if (BillRepo.RemoveMeatFromBill(id))
        {
            var bill = Bills.Items.FirstOrDefault(x => x.Id == billId);
            bill.Items = bill.Items.Where(x => x.Id != id).AsEnumerable();
        }
        await HelperFunctions.RemoveIndicator(JsRuntime);
    }

    void OnRangeSelect(BlazorDateRangePicker.DateRange range)
    {
        DateRange.StartDate = range.Start;
        DateRange.EndDate = range.End;
    }

    async Task OnParamSubmit()
    {
        Query["keyword"] = Keyword;
        Query["startDate"] = DateRange.StartDate != null ? DateRange.StartDate.Value.ToString("dd-MM-yyyy") : "";
        Query["endDate"] = DateRange.EndDate != null ? DateRange.EndDate.Value.ToString("dd-MM-yyyy") : "";
        Query["isPaid"] = IsPaid.ToString();

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));

        ShowingDate = HandleShowDate();
        await GetData();
    }

    string HandleShowDate()
    {
        if (DateRange.StartDate.Value.Date.CompareTo(DateRange.EndDate.Value.Date) == 0)
        {
            return $"{LRes["Showing"]}: {LRes["date"]} {DateRange.StartDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(DateRange.StartDate.Value.DateTime)} {LRes["LunarDate"]})";
        }
        else
        {
            return $"{LRes["Showing"]}: {LRes["date"]} {LRes["from"]} {DateRange.StartDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(DateRange.StartDate.Value.DateTime)} {LRes["LunarDate"]}) {LRes["to"]} {DateRange.EndDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.GetLunarDate(DateRange.EndDate.Value.DateTime)} {LRes["LunarDate"]})";
        }
    }

    async Task HandlePayingBill()
    {
        if (SelectedBill.Id > 0)
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (BillRepo.PayingBill(SelectedBill.Id, SelectedBill.TotalPrice))
            {
                Bills.Items.FirstOrDefault(x => x.Id == SelectedBill.Id).IsPaid = true;
                SelectedBill = new();
                await HelperFunctions.RemoveIndicator(JsRuntime);
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["SucessfullyPaid"]);
            }
            else
            {
                await HelperFunctions.RemoveIndicator(JsRuntime);
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["PaidFailed"]);
            }
        }
    }

    async Task HandleShowMore()
    {
        Pagination.PageSize += 5;
        Query["pageSize"] = Pagination.PageSize.ToString();

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));
        await GetData();
    }

    void HandleSelecteBill(BillDTO bill)
    {
        SelectedBill = bill;
    }

    async Task HandleDeleteBill()
    {
        if (SelectedBill.Id > 0)
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            var result = BillRepo.DeleteBill(SelectedBill.Id);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            if (result)
            {
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["Move to recycle bin success"]);
                Bills.Items = Bills.Items.Where(x => x.Id != SelectedBill.Id).ToList();
                SelectedBill = new();
                return;
            }
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["Move to reycle bin failed"]);
        }
    }

    void HandleSelectPaid(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (string.IsNullOrEmpty(value))
        {
            IsPaid = null;
        }
        else
        {
            IsPaid = bool.Parse(value);
        }
    }
}
