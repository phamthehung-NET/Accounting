@* @page "/manage-sale" *@
@inject IStringLocalizer<Resource> LRes
@inject IBillRepository BillRepo
@inject NavigationManager NavigationManager 
@inject IJSRuntime JsRuntime
@inject ILogRepository LogRepo
@inject ISettingRepository SettingRepo
@inject IPrintingService PrintingService
@attribute [Authorize]

<PageTitle>@LRes["Manage Sale"]</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between mb-2">
        <CommonLabel DisplayText="@LRes["SaleList"]" Color="@Constants.PrimaryColor"></CommonLabel>
        <div class="fw-bold">@ShowingDate</div>
    </div>
    <div class="d-flex justify-content-end mb-2">
        @if(Bills != null && !Bills.Items.Any(x => x.PersonId == 0)
        && (DateRange.StartDate.Value.Date.CompareTo(DateTime.Now.Date) == 0
        || DateRange.EndDate.Value.Date.CompareTo(DateTime.Now.Date) == 0))
        {
            <button class="btn btn-outline-primary me-1" @onclick="HandleAddOwnBill">@LRes["Add own bill"]</button>
        }
        <div class="col-md-2 col-lg-2 col-sm-12 me-1">
            <select class="form-control" @onchange="HandleSelectPaid">
                <option value="">@LRes["ChooseBillType"]</option>
                <option value="true" selected="@IsPaid">@LRes["Paid"]</option>
                <option value="false" selected="@(!IsPaid)">@LRes["Unpaid"]</option>
            </select>
        </div>
        <div class="col-md-3 col-lg-3 col-sm-12 me-1">
            <DateRangePicker class="form-control" @bind-StartDate="@(DateRange.StartDate)" @bind-EndDate="@(DateRange.EndDate)" placeholder="@LRes["ChooseDate"]" OnRangeSelect="OnRangeSelect" MinDate="DateTime.Now.AddYears(-10)" MaxDate="DateTime.Now" ApplyLabel="@LRes["Done"]" CancelLabel="@LRes["Close"]" ShowOnlyOneCalendar="true"/>
        </div>
        <div class="d-flex col-md-4 col-lg-4 col-sm-12 justify-content-between">
            <div class="col-md-10 col-lg-10 col-sm-12 pe-1">
                <input type="text" class="form-control" placeholder="@LRes["Search by name"]" value="@Keyword" @onchange="(ChangeEventArgs e) => {Keyword = e.Value.ToString();}" />
            </div>
            <div class="col-md-2 col-lg-2 col-sm-12">
                <button class="btn btn-primary w-100" @onclick="() => OnParamSubmit()"><i class="fa-regular fa-filter"></i> <span class="btn-filter-text">@LRes["Filter"]</span></button>
            </div>
        </div>
    </div>
    <div class="row">
        @if(DateRange.StartDate.Value.Date.CompareTo(DateTime.Now.Date) == 0 || DateRange.EndDate.Value.Date.CompareTo(DateTime.Now.Date) == 0)
        {
            <div class="card col-md-4 col-sm-12 col-lg-4 col-xl-4 mb-4 p-0">
                <div class="card-header">
                    @LRes["Add"]
                </div>
                <div class="card-body d-flex align-items-center justify-content-center">
                    <div class="text-center text-primary" role="button" data-bs-toggle="modal" data-bs-target="#addBillPeopleModal">
                        <i class="fa-regular fa-circle-plus fa-2xl"></i>
                        <div class="mt-2" style="font-size: 1.5rem">@LRes["ClickToAdd"]</div>
                    </div>
                </div>
            </div>
        }
        @if (Bills != null && Bills.Items.Any())
        {
            foreach (var bill in Bills.Items)
            {
                <div class="card col-md-4 col-sm-12 col-lg-4 col-xl-4 mb-4 p-0">
                    <div class="card-header d-flex justify-content-between">
                        <div class="fw-bold">@bill.PersonName</div>
                        <div class="d-flex">
                            <div class="me-2">@(bill.ActiveDate.Value.ToString("dd/MM/yyyy") + " (" + (string.IsNullOrEmpty(bill.LunarActiveDate) ? HelperFunctions.ConvertSolarToLunar(bill.ActiveDate.Value) : bill.LunarActiveDate) + LRes["LunarDate"] + ")")</div>
                            <div>@(bill.Items.Count() + " " + LRes["item(s)"])</div>
                            @if (bill.Items.Any() && bill.PersonId != 0)
                            {
                                @((MarkupString)HandleShowStatus(bill.IsPaid))
                            }
                        </div>
                    </div>
                    <div class="card-body overflow-auto" style="height: 15rem">
                        @if (bill.IsPaid.Value)
                        {
                            <div class="position-absolute paid-box-@(CultureInfo.CurrentCulture.TwoLetterISOLanguageName)"></div>
                        }
                        <ul class="list-group list-group-flush" style="position:relative">
                            @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                            {
                                <li class="list-group-item">
                                    <button class="btn border-0 bg-transparent text-primary w-100 py-0" data-bs-toggle="modal" data-bs-target="#addBillMeatModal" @onclick="() => HandleSelecteBill(bill)">
                                        <i class="fa-regular fa-circle-plus"></i>
                                        <span>@LRes["Add"]</span>
                                    </button>
                                </li>
                            }
                            @if (bill.PersonId == 0)
                            {
                                @if (bill.RestMeatWeigt == 0)
                                {
                                    <li class="list-group-item">
                                        <button class="btn border-0 bg-transparent text-primary w-100 py-0" data-bs-toggle="modal" data-bs-target="#addRestMeatModal" @onclick="() => HandleSelecteBill(bill)">
                                            <i class="fa-regular fa-circle-plus"></i>
                                            <span>@LRes["AddRestMeat"]</span>
                                        </button>
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item">
                                        <div>@(LRes["Rest"] + ": " + bill.RestMeatWeigt + " kg")</div>
                                    </li>
                                }
                            }
                            @foreach (var item in bill.Items)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <div>@(item.MeatName + " " + HelperFunctions.RenderMeatType(LRes, item.MeatType != null ? item.MeatType.Value : null) + (item.Frozen ? "❄️" : ""))</div>
                                    <div>@(item.Weight + " Kg")</div>
                                    <div>@item.Price</div>
                                    @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                                    {
                                        <div role="button" @onclick="() => HandleDeleteItemFromBill(item.Id.Value, bill.Id)" class="text-danger"><i class="fa-regular fa-xmark"></i></div>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <div>
                            @* @(bill.TotalPrice == 0 ? string.Empty : bill.TotalPrice.ToString("n0") + ".000 VND") *@
                            @if (bill.TotalPrice > 0 && bill.PaidAmount == 0)
                            {
                                <div>@(bill.TotalPrice.ToString("n0") + ".000 VND")</div>
                            }
                            else if (bill.RestAmount > 0 && bill.RestAmount < bill.TotalPrice)
                            {
                                            <div class="d-flex"><span class="text-muted text-decoration-line-through me-1">@(bill.TotalPrice.ToString("n0") + ".000 VND")</span>@(bill.RestAmount == 0 ? string.Empty : bill.RestAmount.ToString("n0") + ".000 VND")</div>
                            }
                        </div>
                        <div class="me-0">
                            @if (!bill.IsPaid.Value && bill.Items.Any() && bill.PersonId != 0)
                            {
                                <button class="btn btn-primary me-1" data-bs-toggle="modal" data-bs-target="#payingBill" @onclick="() => HandleSelecteBill(bill)"><i class="fa-brands fa-amazon-pay"></i> @LRes["Pay"]</button>
                            }
                            @if (bill.ActiveDate.Value.Date == DateTime.Now.Date && !bill.IsPaid.Value)
                            {
                                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteBill" @onclick="() => HandleSelecteBill(bill)"><i class="fa-solid fa-recycle"></i> @LRes["Delete"]</button>
                            }
                            <button class="btn btn-outline-primary ms-1" @onclick="@(async () => await Print(bill))">
                                <i class="fa-regular fa-print"></i>
                            </button>
                            <div class="btn-group dropup">
                                <button type="button" class="btn border-0 bg-transparent rounded-0 p-1 ms-2" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa-regular fa-ellipsis-vertical"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    @if (!bill.IsPaid.Value && bill.PaidAmount == 0)
                                    {
                                        <li class="dropdown-item" data-bs-toggle="modal" data-bs-target="#editPriceModal" @onclick="() => HandleSelecteBill(bill)">@LRes["EditItemsPrice"]</li>
                                    }
                                    <li class="dropdown-item" data-bs-toggle="modal" data-bs-target="#historyModal" @onclick="() => HandleSelecteBill(bill)">@LRes["ViewHistory"]</li>
                                    <li class="dropdown-item" @onclick="() => Print(bill, true)">@LRes["ExportToExcel"]</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    @if (Bills != null && Pagination.PageSize < Bills.TotalItems)
    {
        <div class="text-center mb-5">
            <div>
                <button class="btn btn-primary" @onclick="HandleShowMore">@LRes["ShowMore"]</button>
            </div>
        </div>
    }
    <CommonModalWrapper Id="addBillPeopleModal">
        <ModalContent>
            <AddBillPerson GetData="async () => await GetData()" PriceType="PriceType.Sale"/>
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="addBillMeatModal">
        <ModalContent>
            <AddBillMeat GetData="async () => await GetData()" PriceType="PriceType.Sale" BillId="SelectedBill.Id" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="historyModal">
        <ModalContent>
            <HistoryModal BillId="SelectedBill.Id" HistoryType="HistoryType.Bill" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="editPriceModal">
        <ModalContent>
            <EditItemsPrice BillId="SelectedBill.Id" GetParentData="async () => await GetData()" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="payingBill">
        <ModalContent>
            <PaymentModal GetData="async () => await GetData()" Bill="SelectedBill" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonModalWrapper Id="addRestMeatModal">
        <ModalContent>
            <AddRestMeatModal GetData="async () => await GetData()" Bill="SelectedBill" />
        </ModalContent>
    </CommonModalWrapper>
    <CommonConfirmModal Title="@LRes["DeleteTitle"]" Message="@LRes["DeleteBillConfimation"]" ModalID="deleteBill" SubmitEvent="async () => await HandleDeleteBill()"/>
</div>

@code {
    /// <summary>
    /// Keyword to search
    /// </summary>
    string Keyword = string.Empty;

    /// <summary>
    /// List data
    /// </summary>
    Pagination<BillDTO> Bills;

    /// <summary>
    /// The pagination object to paginate data 
    /// </summary>
    PaginationObject Pagination = new()
    {
        PageSize = 9
    };

    /// <summary>
    /// Query params of the page
    /// </summary>
    Dictionary<string, string> Query = new()
    {
        {"pageSize", ""},
        {"keyword", ""},
        {"startDate", ""},
        {"endDate", ""},
        {"isPaid", ""},
    };

    Uri Uri;

    /// <summary>
    /// Save the selected bill
    /// </summary>
    BillDTO SelectedBill = new();

    DateRangeDTO DateRange = new()
    {
        StartDate = DateTimeOffset.Now,
        EndDate = DateTimeOffset.Now,
    };

    string ShowingDate = string.Empty;

    bool? IsPaid;

    protected override void OnInitialized()
    {
        Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
        }
    }

    async Task GetData()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (Uri != null)
            {
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("keyword", out var keyword))
                {
                    if (string.IsNullOrEmpty(Query["keyword"]))
                    {
                        Keyword = Query["keyword"];
                    }
                    else
                    {
                        Keyword = keyword;
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("pageSize", out var pageSize))
                {
                    if (string.IsNullOrEmpty(Query["pageSize"]))
                    {
                        Pagination.PageSize = !string.IsNullOrEmpty(pageSize) ? int.Parse(pageSize) : Pagination.PageSize;
                    }
                    else
                    {
                        Pagination.PageSize = int.Parse(Query["pageSize"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("startDate", out var startDate))
                {
                    if (string.IsNullOrEmpty(Query["startDate"]))
                    {
                        DateRange.StartDate = !string.IsNullOrEmpty(startDate) ? DateTimeOffset.Parse(startDate) : DateRange.StartDate;
                    }
                    else
                    {
                        DateRange.StartDate = DateTimeOffset.Parse(Query["startDate"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("endDate", out var endDate))
                {
                    if (string.IsNullOrEmpty(Query["endDate"]))
                    {
                        DateRange.EndDate = !string.IsNullOrEmpty(endDate) ? DateTimeOffset.Parse(endDate) : DateRange.EndDate;
                    }
                    else
                    {
                        DateRange.EndDate = DateTimeOffset.Parse(Query["endDate"]);
                    }
                }
                if (QueryHelpers.ParseQuery(Uri.Query).TryGetValue("isPaid", out var isPaid))
                {
                    IsPaid = !string.IsNullOrEmpty(isPaid) ? bool.Parse(isPaid) : IsPaid;
                }
            }

            Bills = BillRepo.GetAll(Keyword, DateRange.StartDate != null ? DateRange.StartDate.Value.DateTime : null, DateRange.EndDate != null ? DateRange.EndDate.Value.DateTime : null, Pagination.PageIndex, Pagination.PageSize, PriceType.Sale, IsPaid);
            foreach (var bill in Bills.Items.Where(x => x.PersonId == 0))
            {
                bill.PersonName = "Viết";
            }
            ShowingDate = await HandleShowDate();
            await HelperFunctions.RemoveIndicator(JsRuntime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Sale list > GetData()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    async Task HandleAddOwnBill()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            await BillRepo.AddBill(new() { PersonId = 0, Type = (int)PriceType.Sale }, null);
            await GetData();
            await HelperFunctions.RemoveIndicator(JsRuntime);
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Sale list > HandleAddOwnBill()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    string HandleShowStatus(bool? status)
    {
        if (status != null && (bool)status)
        {
            return $"<div class='ms-2 text-success'>{LRes["Paid"]}</div>";
        }
        return $"<div class='ms-2 text-warning'>{LRes["Unpaid"]}</div>";
    }

    async Task HandleDeleteItemFromBill(int id, int billId)
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            if (BillRepo.RemoveMeatFromBill(id))
            {
                var bill = Bills.Items.FirstOrDefault(x => x.Id == billId);
                bill.Items = bill.Items.Where(x => x.Id != id).AsEnumerable();
            }
            await HelperFunctions.RemoveIndicator(JsRuntime);
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Sale list > HandleDeleteItemFromBill()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    void OnRangeSelect(BlazorDateRangePicker.DateRange range)
    {
        DateRange.StartDate = range.Start;
        DateRange.EndDate = range.End;
    }

    async Task OnParamSubmit()
    {
        Query["keyword"] = Keyword;
        Query["startDate"] = DateRange.StartDate != null ? DateRange.StartDate.Value.ToString("dd-MM-yyyy") : "";
        Query["endDate"] = DateRange.EndDate != null ? DateRange.EndDate.Value.ToString("dd-MM-yyyy") : "";
        Query["isPaid"] = IsPaid.ToString();

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));
        await GetData();
    }

    async Task<string> HandleShowDate()
    {
        try
        {
            if (DateRange.StartDate.Value.Date.CompareTo(DateRange.EndDate.Value.Date) == 0)
            {
                return $"{LRes["Showing"]}: {LRes["date"]} {DateRange.StartDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.ConvertSolarToLunar(DateRange.StartDate.Value.DateTime)} {LRes["LunarDate"]})";
            }
            else
            {
                return $"{LRes["Showing"]}: {LRes["date"]} {LRes["from"]} {DateRange.StartDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.ConvertSolarToLunar(DateRange.StartDate.Value.DateTime)} {LRes["LunarDate"]}) {LRes["to"]} {DateRange.EndDate.Value.DateTime.ToString("dd/MM/yyyy")} ({HelperFunctions.ConvertSolarToLunar(DateRange.EndDate.Value.DateTime)} {LRes["LunarDate"]})";
            }
        }
        catch (Exception ex)
        {
            Log log = new()
                {
                    CreatedDate = DateTime.Now,
                    Location = "Sale List > HandleShowDate()",
                    Message = ex.Message,
                    StackTrace = ex.StackTrace
                };

            LogRepo.Add(log);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }

        return "";
    }

    async Task HandlePayingBill()
    {
        try
        {
            if (SelectedBill.Id > 0)
            {
                await HelperFunctions.AddIndicator(JsRuntime);
                if (BillRepo.PayingBill(SelectedBill.Id, SelectedBill.RestAmount, SelectedBill.TotalPrice))
                {
                    await GetData();
                    await HelperFunctions.RemoveIndicator(JsRuntime);
                    await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["SucessfullyPaid"]);
                }
                else
                {
                    await HelperFunctions.RemoveIndicator(JsRuntime);
                    await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["PaidFailed"]);
                }
            }
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Sale List > HandlePayingBill()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    async Task HandleShowMore()
    {
        Pagination.PageSize += 6;
        Query["pageSize"] = Pagination.PageSize.ToString();

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(Uri.AbsolutePath, Query.Where(x => !string.IsNullOrEmpty(x.Value))));
        await GetData();
    }

    void HandleSelecteBill(BillDTO bill)
    {
        SelectedBill = bill;
    }

    async Task HandleDeleteBill()
    {
        try
        {
            if (SelectedBill.Id > 0)
            {
                await HelperFunctions.AddIndicator(JsRuntime);
                var result = BillRepo.DeleteBill(SelectedBill.Id);
                await HelperFunctions.RemoveIndicator(JsRuntime);
                if (result)
                {
                    await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["Move to recycle bin success"]);
                    Bills.Items = Bills.Items.Where(x => x.Id != SelectedBill.Id).ToList();
                    SelectedBill = new();
                    return;
                }
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["Move to reycle bin failed"]);
            }
        }
        catch (Exception ex)
        {
            Log log = new()
            {
                CreatedDate = DateTime.Now,
                Location = "Sale list > HandleDeleteBill()",
                Message = ex.Message,
                StackTrace = ex.StackTrace
            };

            LogRepo.Add(log);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    void HandleSelectPaid(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (string.IsNullOrEmpty(value))
        {
            IsPaid = null;
        }
        else
        {
            IsPaid = bool.Parse(value);
        }
    }

    async Task Print(BillDTO bill, bool exportToExcel = false)
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);

            ExcelPackage excel = new();

            var workSheet = excel.Workbook.Worksheets.Add("Sheet1");

            workSheet.TabColor = System.Drawing.Color.Black;
            workSheet.DefaultRowHeight = 13;

            #region Config excel data

            #region bill header

            //Bill header
            workSheet.Row(1).Style.Font.Bold = true;
            workSheet.Row(1).Style.Font.Size = 22;
            workSheet.Row(1).Height = 25;

            // Id
            workSheet.Rows[1, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            workSheet.Cells["A1:D1"].Merge = true;
            workSheet.Cells["A2:D2"].Merge = true;
            workSheet.Cells["A3:D3"].Merge = true;
            workSheet.Cells["A4:D4"].Merge = true;
            workSheet.Cells["A5:D5"].Merge = true;
            workSheet.Cells[1, 1].Value = "Quyết Viết";
            workSheet.Cells[2, 1].Value = "Cẩm Văn - Cẩm Giàng - Hải Dương";
            workSheet.Cells[3, 1].Value = $"{LRes["Day"]} {Convert.ToDateTime(bill.LunarActiveDate).Day} {LRes["month"]} {Convert.ToDateTime(bill.LunarActiveDate).Month} {LRes["year"]} {Convert.ToDateTime(bill.LunarActiveDate).Year} {LRes["LunarDate"]}";
            workSheet.Cells[4, 1].Value = LRes["Number"] + ": " + bill.Id;
            workSheet.Cells[5, 1].Value = LRes["BuyerName"] + ": " + bill.PersonName;

            #endregion

            #region bill table

            List<string> tableHeader = new() { LRes["Name"], LRes["Weight"], LRes["PerPrice"], LRes["Total"] };

            for (int col = 1; col <= tableHeader.Count; col++)
            {
                workSheet.Cells[6, col].Value = tableHeader[col - 1];
            }

            workSheet.Row(6).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var tableContentRow = 7;
            foreach (var item in bill.Items)
            {
                workSheet.Cells[tableContentRow, 1].Value = item.MeatName + " " + HelperFunctions.RenderMeatType(LRes, item.MeatType) + (item.Frozen ? " ĐL" : "");
                workSheet.Cells[tableContentRow + 1, 2].Value = item.Weight + " Kg";
                workSheet.Cells[tableContentRow + 1, 3].Value = item.Price;
                workSheet.Cells[tableContentRow + 1, 4].Value = item.ItemPrice == 0 ? string.Empty : item.ItemPrice.ToString("n0") + ".000";
                workSheet.Cells[$"B{tableContentRow + 1}:D{tableContentRow + 1}"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tableContentRow += 2;
            }

            workSheet.Cells[tableContentRow, 1].Value = LRes["Total"];
            workSheet.Cells[tableContentRow, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            workSheet.Cells[tableContentRow, 4].Value = bill.TotalPrice == 0 ? string.Empty : bill.TotalPrice.ToString("n0") + ".000";

            var amountRow = tableContentRow + 1;

            workSheet.Cells[amountRow, 1].Value = LRes["Paid"];
            workSheet.Cells[amountRow, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            workSheet.Cells[amountRow, 4].Value = bill.PaidAmount == 0 ? string.Empty : bill.PaidAmount.ToString("n0") + ".000";

            amountRow++;

            workSheet.Cells[amountRow, 1].Value = LRes["Rest"];
            workSheet.Cells[amountRow, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            workSheet.Cells[amountRow, 4].Value = bill.RestAmount == 0 ? string.Empty : bill.RestAmount.ToString("n0") + ".000";

            #endregion

            #region bill footer

            var footerRow = amountRow + 1;

            workSheet.Cells[footerRow, 3, footerRow, 4].Merge = true;
            workSheet.Row(footerRow).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            workSheet.Cells[footerRow, 3].Value = LRes["Seller"];

            footerRow += 3;

            workSheet.Cells[footerRow, 3, footerRow, 4].Merge = true;
            workSheet.Row(footerRow).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            workSheet.Cells[footerRow, 3].Value = "Phạm Thị Viết";

            workSheet.Cells[$"A1:D{footerRow}"].Style.Font.Name = "Times New Roman";

            workSheet.Columns.AutoFit();

            #endregion

            #endregion

            if (bill.IsPaid.Value)
            {
                AddPictureToExcelFile(workSheet);
            }

            if (exportToExcel)
            {
                string path = @"wwroot\bill.xlsx";

                if (File.Exists(path))
                {
                    File.Delete(path);
                }

                FileStream objFileStrm = File.Create(path);
                objFileStrm.Close();

                // // Write content to excel file
                // File.WriteAllBytes(path, excel.GetAsByteArray());
                // //Close Excel package
                // excel.Dispose();

                // Process.Start(new ProcessStartInfo(path) { UseShellExecute = true });
            }
            else
            {
                var path = ConvertToPdf(workSheet, bill.IsPaid.Value);

                var file = Convert.ToBase64String(File.ReadAllBytes(path));

                await PrintingService.Print(new PrintOptions(file) { Base64 = true });

                if (File.Exists(path))
                {
                    File.Delete(path);
                }
            }
            await HelperFunctions.RemoveIndicator(JsRuntime);
        }
        catch (Exception)
        {
            await HelperFunctions.RemoveIndicator(JsRuntime);
        }
    }

    string ConvertToPdf(ExcelWorksheet worksheet, bool paid)
    {
        string path = @"wwwroot\test.pdf";
        string fontName = "Times New Roman";
        PdfDocument pdfDocument = new PdfDocument();
        PdfPage page = pdfDocument.AddPage();
        page.Width = XUnit.FromMillimeter(80);
        XGraphics gfx = XGraphics.FromPdfPage(page);
        XFont fontRegular = new XFont(fontName, 12);
        var fontBold = new XFont(fontName, 22, XFontStyleEx.Bold);

        double y = 20;
        int colCount = worksheet.Dimension.Columns;
        int rowCount = worksheet.Dimension.Rows;
        double[] colWidths = new double[colCount];

        colWidths[1] = 40;
        colWidths[2] = 45;
        colWidths[3] = 70;
        colWidths[0] = page.Width.Point - (colWidths[1] + colWidths[2] + colWidths[3] + 20);

        for (int row = 1; row <= rowCount; row++)
        {
            double x = 10;
            if (row == 2) y += 10; // Distance of line 1 and 2

            for (int col = 1; col <= colCount; col++)
            {
                string text = worksheet.Cells[row, col].Text;
                var font = (row == 1) ? fontBold : fontRegular; // Bold line 1, regular rest lines
                if (row == 6) font = new XFont(fontName, 12, XFontStyleEx.Bold); // Line 6 bold

                // Center first 3 rows
                if (row <= 3)
                {
                    x = (page.Width.Point - 40) / 2; // Center by page with
                }

                // Align right for footer
                if (row >= rowCount - 3)
                {
                    x = page.Width.Point - colWidths[col - 1] - 20;
                    if (row == rowCount) x = page.Width.Point - colWidths[col - 1] - 10; // Sign line
                }

                var alignment = (row <= 3) ? XStringFormats.TopCenter : (col == 2 || col == 3 || col == 4 || row >= rowCount - 3) ? XStringFormats.TopRight : XStringFormats.TopLeft;
                gfx.DrawString(text, font, XBrushes.Black, new XRect(x, y, colWidths[col - 1] - 5, 15), alignment);
                x += colWidths[col - 1];
            }

            // Draw solid under border from line 6 to line (rowCount - 4)
            if (row >= 6 && row <= rowCount - 4)
            {
                gfx.DrawLine(XPens.Black, 10, y + 15, x, y + 15);
            }

            y += 20;
        }

        if (paid)
        {
            AddPictureToPdfFile(gfx);
        }

        pdfDocument.Save(path);
        return path;
    }

    void AddPictureToExcelFile(ExcelWorksheet worksheet)
    {
        var image = HelperFunctions.SetImageOpacityAndRotate("wwwroot/paid.png", 0.3f, 30);
        using (MemoryStream imageStream = new MemoryStream())
        {
            image.Save(imageStream, ImageFormat.Png);
            imageStream.Position = 0;

            ExcelPicture picture = worksheet.Drawings.AddPicture("MyImage", imageStream);
            picture.SetPosition(3, 0, 1, 0);
            picture.SetSize(200, 200);
        }
    }

    void AddPictureToPdfFile(XGraphics gfx)
    {
        var image = HelperFunctions.SetImageOpacityAndRotate("wwwroot/paid.png", 0.3f, 30);
        using (MemoryStream imageStream = new MemoryStream())
        {
            image.Save(imageStream, ImageFormat.Png);
            imageStream.Position = 0;

            XImage xImage = XImage.FromStream(imageStream);
            gfx.DrawImage(xImage, 25, 110, 200, 200);
        }
    }
}
