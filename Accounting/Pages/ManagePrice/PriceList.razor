@using System.Globalization
@using Microsoft.Extensions.Localization;
@inject IPriceRepository PriceRepository
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes

<div class="modal-dialog modal-xl">
    <div class="modal-content">
        <div class="modal-header">
            <CommonLabel DisplayText="@LRes["ManagePriceTitle"]" Color="primary"></CommonLabel>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnCloseModal"></button>
        </div>
        <div class="modal-body">
            @if (Meats != null)
            {
                <table class="table table-bordered table-striped text-center">
                    <thead>
                        <tr>
                            <th class="align-middle">@LRes["Name"]</th>
                            <th class="align-middle">@LRes["Meat Type"]</th>
                            <th class="align-middle">@LRes["Prozen Meat"]?</th>
                            <th>
                                @LRes["Yesterday Entry Price"]/Kg
                                <div>@HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))</div>
                            </th>
                            <th>
                                @LRes["Today Entry Price"]/Kg
                                <div>@HelperFunctions.GetLunarDate(DateTime.Now)</div>
                            </th>
                            <th>
                                @LRes["Yesterday Sale Price"]/Kg
                                <div>@HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))</div>
                            </th>
                            <th>
                                @LRes["Today Sale Price"]/Kg
                                <div>@HelperFunctions.GetLunarDate(DateTime.Now)</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Meats.Items.Any())
                        {
                            foreach (var meat in Meats.Items)
                            {
                                <tr>
                                    <td>@meat.Name</td>
                                    <td>@HelperFunctions.RenderMeatType(LRes, meat.Type.Value)</td>
                                    <td>@(meat.Prozen.Value ? "✔️" : "❌")</td>
                                    <td>@(meat.YesterdayEntryPrice == null ? LRes["No data"] : meat.YesterdayEntryPrice)</td>
                                    <td>
                                        <input type="number" min=0 value="@(meat.TodayEntryPrice == null ? (InputEntryList.TryGetValue(meat.Id, out int value) ? value : null) : meat.TodayEntryPrice)" placeholder="@LRes["No data"]" class="form-control" onchange="@((ChangeEventArgs e) => OnInputChange(meat.Id, int.Parse(e.Value.ToString()), "entry"))"/>
                                    </td>
                                    <td>@(meat.YesterdaySalePrice == null ? LRes["No data"] : meat.YesterdaySalePrice)</td>
                                    <td>
                                        <input type="number" min=0 value="@(meat.TodaySalePrice == null ? (InputSaleList.TryGetValue(meat.Id, out int saleval) ? saleval : null) : meat.TodaySalePrice)" placeholder="@LRes["No data"]" class="form-control" onchange="@((ChangeEventArgs e) => OnInputChange(meat.Id, int.Parse(e.Value.ToString()), "sale"))" />
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="OnCloseModal">@LRes["Close"]</button>
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="OnSubmit">@LRes["Done"]</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Pagination<MeatDTO> Meats { get; set; }

    [Parameter]
    public EventCallback GetData { get; set; }

    Dictionary<int, int> InputEntryList = new();

    Dictionary<int, int> InputSaleList = new();

    void OnInputChange(int meatId, int price, string inputType)
    {
        if (inputType == "sale")
        {
            if (InputSaleList.TryGetValue(meatId, out var value))
            {
                InputSaleList[meatId] = price;
                return;
            }
            InputSaleList.Add(meatId, price);
        }
        else
        {
            if (InputEntryList.TryGetValue(meatId, out var value))
            {
                InputEntryList[meatId] = price;
                return;
            }
            InputEntryList.Add(meatId, price);
        }
    }

    async Task OnCloseModal()
    {
        InputEntryList.Clear();
        InputSaleList.Clear();
        await GetData.InvokeAsync();
    }

    async Task OnSubmit()
    {
        var result = PriceRepository.UpdateItemPrice(InputEntryList, InputSaleList);
        if (result)
        {
            InputEntryList.Clear();
            InputSaleList.Clear();
            await HelperFunctions.ShowNotification(JsRuntime, "success", LRes["EditPriceSuccess"]);
            await GetData.InvokeAsync();
            return;
        }
        await HelperFunctions.ShowNotification(JsRuntime, "danger", LRes["EditPriceFailed"]);
    }
}
