@using System.Globalization
@using Microsoft.Extensions.Localization;
@inject IPriceRepository PriceRepository
@inject IMeatRepository MeatRepository
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> LRes

<div class="modal-dialog modal-xl">
    <div class="modal-content">
        <div class="modal-header">
            <CommonLabel DisplayText="@LRes["ManagePriceTitle"]" Color="primary"></CommonLabel>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnCloseModal"></button>
        </div>
        <div class="modal-body overflow-auto" style="height: 73vh">
            @if (Meats != null)
            {
                <CommonDataTable Context="Context" 
                    Headers="Headers" 
                    TData="MeatDTO"
                    PaginationData="Meats" 
                    Sorting="@Sorting" 
                    SortData="(sortingString) => SortData(sortingString)">
                    <TBody>
                        <tr>
                            <td>@Context.Name</td>
                            <td>@HelperFunctions.RenderMeatType(LRes, Context.Type.Value)</td>
                            <td>@(Context.Frozen.Value ? LRes["Frozen Meat"] : LRes["Normal Meat"])</td>
                            <td>@(Context.YesterdayEntryPrice == null ? LRes["No data"] : Context.YesterdayEntryPrice)</td>
                            <td>
                                <input type="number" min=0 value="@(Context.TodayEntryPrice == null ? (InputEntryList.TryGetValue(Context.Id, out int? value) ? value : null) : Convert.ToInt32(Context.TodayEntryPrice.Value.ToString("n0")))" placeholder="@LRes["No data"]" class="form-control" onchange="@((ChangeEventArgs e) => OnInputChange(Context.Id, int.Parse(e.Value.ToString()), "entry"))"/>
                            </td>
                            <td>@(Context.YesterdaySalePrice == null ? LRes["No data"] : Context.YesterdaySalePrice)</td>
                            <td>
                                <input type="number" min=0 value="@(Context.TodaySalePrice == null ? (InputSaleList.TryGetValue(Context.Id, out int? saleval) ? saleval : null) : Convert.ToInt32(Context.TodaySalePrice.Value.ToString("n0")))" placeholder="@LRes["No data"]" class="form-control" onchange="@((ChangeEventArgs e) => OnInputChange(Context.Id, int.Parse(e.Value.ToString()), "sale"))" />
                            </td>
                        </tr>
                    </TBody>
                </CommonDataTable>
            }
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="OnCloseModal">@LRes["Close"]</button>
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="OnSubmit">@LRes["Done"]</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback GetParentData { get; set; }

    Pagination<MeatDTO> Meats;

    PaginationObject Pagination = new();

    List<Header> Headers = new();

    string Sorting = "id_asc";

    Dictionary<int, int?> InputEntryList = new();

    Dictionary<int, int?> InputSaleList = new();

    protected override void OnInitialized()
    {
        Headers.Add(new Header() { Name = "Name", DisplayName = LRes["Name"], Ordering = true });
        Headers.Add(new Header() { Name = "Type", DisplayName = LRes["Meat Type"], Ordering = true });
        Headers.Add(new Header() { Name = "Frozen", DisplayName = LRes["Product Type"], Ordering = true });
        Headers.Add(new Header() { Name = "YesterdayEntryPrice", DisplayName = $"{LRes["Yesterday Entry Price"]}/Kg <div>{HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))}</div>", Ordering = true });
        Headers.Add(new Header() { Name = "Today Entry Price", DisplayName = $"{LRes["Today Entry Price"]}/Kg <div>{HelperFunctions.GetLunarDate(DateTime.Now)}</div>", Ordering = true });
        Headers.Add(new Header() { Name = "Today Entry Price", DisplayName = $"{LRes["Yesterday Sale Price"]}/Kg <div>{HelperFunctions.GetLunarDate(DateTime.Now.AddDays(-1))}</div>", Ordering = true });
        Headers.Add(new Header() { Name = "Today Entry Price", DisplayName = $"{LRes["Today Sale Price"]}/Kg <div>{HelperFunctions.GetLunarDate(DateTime.Now)}</div>", Ordering = true });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            GetData();
        }
    }

    void GetData()
    {
        Meats = MeatRepository.GetAllMeats(string.Empty, null, null, 1, 10000, Sorting);
        StateHasChanged();
    }

    void OnInputChange(int meatId, int price, string inputType)
    {
        if (inputType == "sale")
        {
            if (InputSaleList.TryGetValue(meatId, out var value))
            {
                InputSaleList[meatId] = price;
                return;
            }
            InputSaleList.Add(meatId, price);
        }
        else
        {
            if (InputEntryList.TryGetValue(meatId, out var value))
            {
                InputEntryList[meatId] = price;
                return;
            }
            InputEntryList.Add(meatId, price);
        }
    }

    async Task OnCloseModal()
    {
        InputEntryList.Clear();
        InputSaleList.Clear();
        await GetParentData.InvokeAsync();
        GetData();
    }

    async Task OnSubmit()
    {
        try
        {
            await HelperFunctions.AddIndicator(JsRuntime);
            var result = PriceRepository.UpdateItemPrice(InputEntryList, InputSaleList);
            await HelperFunctions.RemoveIndicator(JsRuntime);
            if (result)
            {
                InputEntryList.Clear();
                InputSaleList.Clear();
                await HelperFunctions.ShowNotification(JsRuntime, ToastType.Success, LRes["EditPriceSuccess"]);
                await GetParentData.InvokeAsync();
                GetData();
                return;
            }
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["EditPriceFailed"]);
        }
        catch (Exception ex)
        {
            await HelperFunctions.ShowNotification(JsRuntime, ToastType.Error, LRes["CommonErrMsg"]);
        }
    }

    void SortData(string sortingString)
    {
        Sorting = sortingString;
        StateHasChanged();
        GetData();
    }
}
